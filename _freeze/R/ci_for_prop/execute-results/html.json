{
  "hash": "7544235e7d33c69b56f9d8e5ecaca819",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Confidence Intervals for Proportions in R\"\n---\n\n\n\n## Introduction\n\nThe methods to use for calculating a confidence interval (CI) for a proportion depend on the type of proportion you have.\n\n-   1 sample proportion (1 proportion calculated from 1 group of subjects)\n\n-   2 sample proportions and you want a CI for the difference in the 2 proportions.\n\n    -   If the 2 samples come from 2 independent samples (different subjects in each of the 2 groups)\n\n    -   If the 2 samples are matched (i.e. the same subject has 2 results, one on each group \\[paired data\\]).\n\nThe method selected is also dependent on whether your proportion is close to 0 or 1 (or near to the 0.5 midpoint), and your sample size.\n\nFor more information about these methods, including which performs better in different scenarios see [Five Confidence Intervals for Proportions That You Should Know about](https://towardsdatascience.com/five-confidence-intervals-for-proportions-that-you-should-know-about-7ff5484c024f)^1^.\n\nNote: information about cicalc package will be added to this page soon.\n\n## Data used\n\nThe adcibc data stored [here](../data/adcibc.csv) was used in this example, creating a binary treatment variable `trt` taking the values of `ACT` or `PBO` and a binary response variable `resp` taking the values of `Yes` or `No`. For this example, a response is defined as a score greater than 4.\n\n\n\n\n\n\n\nThe below shows that for the Actual Treatment, there are 36 responders out of 154 subjects = 0.234 (23.4% responders).\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n# Groups:   trt [2]\n  trt   resp      n\n  <chr> <chr> <int>\n1 ACT   No      118\n2 ACT   Yes      36\n3 PBO   No       65\n4 PBO   Yes      12\n```\n\n\n:::\n:::\n\n\n\n## Packages\n\n**The {cardx} package** is an extension of the {cards} package, providing additional functions to create Analysis Results Data Objects (ARDs)^1^. It was developed as part of {NEST} and pharmaverse. This package requires the binary endpoint to be a logical (TRUE/FALSE) vector or a numeric/integer coded as (0, 1) with 1 (TRUE) being the success you want to calculate the confidence interval for.\n\nSee [here](R:%20Functions%20for%20Calculating%20Proportion%20Confidence%20Intervals) for full description of the {cardx} proportions equations.\n\nIf calculating the CI for a difference in proportions, the package requires both the response and the treatment variable to be numeric/integer coded as (0, 1) (or logical vector).\n\nInstead of the code presented below, you can use `ard_categorical_ci(data, variables=resp, method ='wilson')` for example. This invokes the code below but returns an analysis results dataset (ARD) format as the output. Methods included are waldcc, wald, clopper-pearson, wilson, wilsoncc, strat_wilson, strat_wilsoncc, agresti-coull and jeffreys for one-sample proportions and methods for 2 independent samples, however currently does not have a method for 2 matched proportions.\n\n**The {PropCIs} package** produces CIs for methods such as Blaker's exact method and Midp which aren't available in {cardx} but are available in SAS. We found results agreed with SAS to the 5th decimal place. The package also calculates CIs for Clopper-Pearson, Wald, Wilson, Agresti-Coull and these align to results obtained in cardx to at least the 7th decimal place. The {PropsCIs} package requires just the number of events (numerator number of successes) & total number of subjects (denominator) as an input dataset. Given Blaker and Midp are rarely used in practice, and {PropsCIs} isn't a package commonly downloaded from CRAN, further details are not provided here.\n\n**The {Hmisc} package** produces CIs using the Clopper-Pearson method. In this example (x=36 and n=154), the results match the cardx package. Documentation reports that the method uses F distribution to compute exact intervals based on the binomial cdf. However, if the percentage of responders is 100% then the upper limit is set to 1. Similarly if the percentage of responders is 0%, then the lower limit is set to 0. Hence, in extreme cases there may be differences between this package and the standard implementation of Clopper-Pearson method.\n\n**The {RBesT} package (Prior to Version 1.8-0)** produces CIs using the Clopper-Pearson method. In this example (x=36 and n=154), the results match the cardx package. However, as described below, there are 2 cases where the results using RBesT package do not match cardx or Hmisc.\n\n1)  x = 0 (0% responders), in which case the lower limit does not match.\n2)  x = n (100% responders), in which case the upper limit does not match.\n\nBecause of the relationship between the binomial distribution and the beta distribution. This package uses quantiles of the beta distribution to derive exact confidence intervals.\n\n$$ B(\\alpha/2;x, n-x+1) < p < B(1-\\alpha/2; x+1, n-x)$$\n\nRBesT equations are:\\\npLow \\<- qbeta(Low, r + (r == 0), n - r + 1)\\\npHigh \\<- qbeta(High, r + 1, n - r + ((n - r) == 0))\n\nIn Version 1.8-0 onwards the equations were updated as follows, which then match the Hmisc intervals:\\\npLow \\<- qbeta(Low, r, n - r + 1)\\\npHigh \\<- qbeta(High, r + 1, n - r)\n\n**The {ExactCIdiff} package** produces exact CIs for two dependent proportions (matched pairs).\n\n**The {DescTools} package** has a function BinomDiffCI which produces CIs for two independent proportions (unmatched pairs) including methods for Agresti/Caffo, Wald, Wald with Continuity correction, Newcombe Score, Newcombe score with continuity correction, and more computationally intensive methods such as Miettinen and Nurminen, Mee, Brown Li's Jeffreys, Hauck-Anderson and Haldane. See [here](https://search.r-project.org/CRAN/refmans/DescTools/html/BinomDiffCI.html) for more detail.\n\n**The {presize} package** has a function prec_prop() which also calculates CIs for 2 independent samples using the Wilson, Agresti-Coull, Exact or Wald approaches. The package is not described in further detail here since in most cases **{DescTools}** will be able to compute what is needed. However, it's mentioned due to other functionality it has available such as sample size and precision calculations for AUC, correlations, cronbach's alpha, intraclass correlation, Cohen's kappa, likelihood ratios, means, mean differences, odds ratios, rates, rate ratios, risk differences and risk ratios.\n\n## Methods for Calculating Confidence Intervals for a single proportion using cardx\n\nFor more technical derivation and reasons for use of each of the methods listed below, see the corresponding [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html).\n\nLet's start by calculating a Confidence interval for the proportion of successes observed in the Active Treatment group (a single sample).\n\n### Clopper-Pearson (Exact or binomial CI) Method\n\nClopper-Pearson Exact CI is one of the most popular methods, it is often good for small sample sizes when the proportion is not close to the tails (0,1), but it can be too conservative (too wide an interval compared to the interval containing the true population proportion 95% of the time).\n\nThe cardx package calculates the Clopper-Pearson score by calling stats::binom.test() function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncardx::proportion_ci_clopper_pearson(act2, conf.level = 0.95) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 10\n      N conf.level estimate statistic  p.value parameter conf.low conf.high\n  <int>      <dbl>    <dbl>     <dbl>    <dbl>     <dbl>    <dbl>     <dbl>\n1   154       0.95    0.234        36 2.21e-11       154    0.169     0.309\n# ℹ 2 more variables: method <chr>, alternative <chr>\n```\n\n\n:::\n:::\n\n\n\n### Normal Approximation Method (Also known as the Wald or asymptotic CI Method)\n\nIn large random samples from independent trials, the sampling distribution of proportions approximately follows the normal distribution. The expectation of a sample proportion is the corresponding population proportion. Therefore, based on a sample of size $n$, a $(1-\\alpha)\\%$ confidence interval for population proportion can be calculated using normal approximation as follows:\n\n$p\\approx \\hat p \\pm z_\\alpha \\sqrt{\\hat p(1-\\hat p)}/{n}$, where $\\hat p$ is the sample proportion, $z_\\alpha$ is the $1-\\alpha/2$ quantile of a standard normal distribution corresponding to level $\\alpha$, and $\\sqrt{\\hat p(1-\\hat p)}/{n}$ is the standard error.\n\nFor more technical information see the corresponding [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html).\n\n#### Example code\n\nThe following code calculates a confidence interval for a binomial proportion using normal approximation equation manually. This is replicated exactly using the `cardx::proportion_ci_wald function` which also allows the continuity correction to be applied.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sample proportion by trt\nsummary <- adcibc |>\n  filter(trt == \"ACT\") |>\n  group_by(resp) |>\n  tally() |>\n  ungroup() |>\n  mutate(\n    total = sum(n),\n    p = n / total\n  )\n\n# Calculate standard error and 95% wald confidence intervals for population proportion\nwaldci <- summary |>\n  filter(resp == \"Yes\") |>\n  mutate(\n    se = sqrt(p * (1 - p) / total),\n    lower_ci = (p - qnorm(1 - 0.05 / 2) * se),\n    upper_ci = (p + qnorm(1 - 0.05 / 2) * se)\n  )\nwaldci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  resp      n total     p     se lower_ci upper_ci\n  <chr> <int> <int> <dbl>  <dbl>    <dbl>    <dbl>\n1 Yes      36   154 0.234 0.0341    0.167    0.301\n```\n\n\n:::\n\n```{.r .cell-code}\n# cardx package Wald method without continuity correction\ncardx::proportion_ci_wald(act2, conf.level = 0.95, correct = FALSE) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n      N estimate conf.low conf.high conf.level method                           \n  <int>    <dbl>    <dbl>     <dbl>      <dbl> <glue>                           \n1   154    0.234    0.167     0.301       0.95 Wald Confidence Interval without…\n```\n\n\n:::\n\n```{.r .cell-code}\n# cardx package Wald method with continuity correction\ncardx::proportion_ci_wald(act2, conf.level = 0.95, correct = TRUE) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n      N estimate conf.low conf.high conf.level method                           \n  <int>    <dbl>    <dbl>     <dbl>      <dbl> <glue>                           \n1   154    0.234    0.164     0.304       0.95 Wald Confidence Interval with co…\n```\n\n\n:::\n:::\n\n\n\n### Wilson Method (Also known as the Score method or the Altman, Newcombe method^3^ )\n\nThe cardx package calculates the Wilson (score) method by calling stats::prop.test() function. This method is often used as a compromise between the Clopper-Pearson and the Wald given it was found to be accurate for most parameter values (even those close to 0 and 1), and it does not suffer from being over-conservative. For more technical information see the corresponding [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html).\n\nThe package also contains a function for proportion_ci_strat_wilson() which calculates the stratified Wilson CIs for unequal proportions as described on page 47 [here](https://cran.r-universe.dev/cardx/cardx.pdf).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cardx package Wilson method without continuity correction\ncardx::proportion_ci_wilson(act2, conf.level = 0.95, correct = FALSE) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 10\n      N conf.level estimate statistic  p.value parameter conf.low conf.high\n  <int>      <dbl>    <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl>\n1   154       0.95    0.234      43.7 3.90e-11         1    0.174     0.307\n# ℹ 2 more variables: method <glue>, alternative <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# cardx package Wilson method with continuity correction\ncardx::proportion_ci_wilson(act2, conf.level = 0.95, correct = TRUE) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 10\n      N conf.level estimate statistic  p.value parameter conf.low conf.high\n  <int>      <dbl>    <dbl>     <dbl>    <dbl>     <int>    <dbl>     <dbl>\n1   154       0.95    0.234      42.6 6.70e-11         1    0.171     0.310\n# ℹ 2 more variables: method <glue>, alternative <chr>\n```\n\n\n:::\n:::\n\n\n\n### Agresti-Coull Method\n\nThe cardx package calculates the Agresti-Coull method using the equation from the published method by Alan Agresti & Brent Coull based on adding 2 successes and 2 failures before computing the wald CI. The CI is truncated, when it overshoots the boundary (\\<0 or \\>1).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cardx package agresti_coull method\ncardx::proportion_ci_agresti_coull(act2, conf.level = 0.95) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n      N estimate conf.low conf.high conf.level method                           \n  <int>    <dbl>    <dbl>     <dbl>      <dbl> <chr>                            \n1   154    0.234    0.174     0.307       0.95 Agresti-Coull Confidence Interval\n```\n\n\n:::\n:::\n\n\n\n### Jeffreys Method\n\nJeffreys method is a particular type of Bayesian Highest Probability Density (HPD) Method. For proportions, the beta distribution is generally used for the prior, which consists of two parameters alpha and beta. Setting alpha=beta=0.5 is called Jeffrey's prior. NOTE: if you want to use any other priors, you can use `binom.bayes` which estimates a credible interval for proportions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cardx package jeffreys method\ncardx::proportion_ci_jeffreys(act2, conf.level = 0.95) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n      N estimate conf.low conf.high conf.level method           \n  <int>    <dbl>    <dbl>     <dbl>      <dbl> <glue>           \n1   154    0.234    0.172     0.305       0.95 Jeffreys Interval\n```\n\n\n:::\n:::\n\n\n\n## Methods for Calculating Confidence Intervals for a matched pair proportion using {ExactCIdiff}\n\nFor more information about the detailed methods for calculating confidence intervals for a matched pair proportion see [here](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html#methods-for-calculating-confidence-intervals-for-a-matched-pair-proportion). When you have 2 measurements on the same subject, the 2 sets of measures are not independent and you have matched pair of responses.\n\nTo date we have not found an R package which calculates a CI for matched pair proportions using the normal approximation or Wilson methods although they can be done by hand using the equations provided on the SAS page link above.\n\n**The {ExactCIdiff} package** produces exact CIs for two dependent proportions (matched pairs), claiming to be the first package in R to do this method. However, it should only be used when the sample size is not too large as it can be computationally intensive.\\\nNOTE that the {ExactNumCI} package should not be used for this task. More detail on these two packages can be found [here](RJ-2013-026.pdf).\n\nUsing a cross over study as our example, a 2 x 2 table can be formed as follows:\n\n+-----------------------+---------------+---------------+---------------+\n|                       | Placebo\\      | Placebo\\      | Total         |\n|                       | Response= Yes | Response = No |               |\n+=======================+===============+===============+===============+\n| Active Response = Yes | r             | s             | r+s           |\n+-----------------------+---------------+---------------+---------------+\n| Active Response = No  | t             | u             | t+u           |\n+-----------------------+---------------+---------------+---------------+\n| Total                 | r+t           | s+u           | N = r+s+t+u   |\n+-----------------------+---------------+---------------+---------------+\n\n: The proportions of subjects responding on each treatment are:\n\nActive: $\\hat p_1 = (r+s)/n$ and Placebo: $\\hat p_2= (r+t)/n$\n\nDifference between the proportions for each treatment are: $D=p1-p2=(s-t)/n$\n\nSuppose :\n\n+-----------------------+---------------+---------------+------------------+\n|                       | Placebo\\      | Placebo\\      | Total            |\n|                       | Response= Yes | Response = No |                  |\n+=======================+===============+===============+==================+\n| Active Response = Yes | r = 20        | s = 15        | r+s = 35         |\n+-----------------------+---------------+---------------+------------------+\n| Active Response = No  | t = 6         | u = 5         | t+u = 11         |\n+-----------------------+---------------+---------------+------------------+\n| Total                 | r+t = 26      | s+u = 20      | N = r+s+t+u = 46 |\n+-----------------------+---------------+---------------+------------------+\n\nActive: $\\hat p_1 = (r+s)/n$ =35/46 =0.761 and Placebo: $\\hat p_2= (r+t)/n$ = 26/46 =0.565\n\nDifference = 0.761-0.565 = 0.196, then PairedCI() function can provide an exact confidence interval as shown below\n\n-0.00339 to 0.38065\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ExactCIdiff::PairedCI(s, r+u, t, conf.level = 0.95)\n\nCI <- ExactCIdiff::PairedCI(15, 25, 6, conf.level = 0.95)$ExactCI\nCI\n```\n:::\n\n\n\n## Methods for Calculating Confidence Intervals for 2 independent samples proportion\n\nThis [paper](https://www.lexjansen.com/wuss/2016/127_Final_Paper_PDF.pdf)^4^ describes many methods for the calculation of confidence intervals for 2 independent proportions.\n\n### Normal Approximation Method (Also known as the Wald or asymptotic CI Method) using {cardx}\n\nFor more technical information regarding the Wald method see the corresponding [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html).\n\n#### Example code\n\n`cardx::ard_stats_prop_test function` uses `stats::prop.test` which also allows a continuity correction to be applied.\n\nAlthough this website [here](https://rdrr.io/r/stats/prop.test.html) and this one [here](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/prop.test) both reference Newcombe for the CI that this function uses, replication of the results by hand and compared to SAS show that the results below match the Normal Approximation (Wald method).\n\nBoth the Treatment variable (ACT,PBO) and the Response variable (Yes,No) have to be numeric (0,1) or Logit (TRUE,FALSE) variables.\n\nThe prop.test default with 2 groups, is the null hypothesis that the proportions in each group are the same and a 2-sided CI.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindat1 <- adcibc2 |>\n  select(AVAL, TRTP) |>\n  mutate(\n    resp = if_else(AVAL > 4, \"Yes\", \"No\"),\n    respn = if_else(AVAL > 4, 1, 0),\n    trt = if_else(TRTP == \"Placebo\", \"PBO\", \"ACT\"),\n    trtn = if_else(TRTP == \"Placebo\", 1, 0)\n  ) |>\n  select(trt, trtn, resp, respn)\n\n# cardx package required a vector with 0 and 1s for a single proportion CI\n# To get the comparison the correct way around Placebo must be 1, and Active 0\n\nindat <- select(indat1, trtn, respn)\n\ncardx::ard_stats_prop_test(\n  data = indat,\n  by = trtn,\n  variables = respn,\n  conf.level = 0.95,\n  correct = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n{cards} data frame: 13 x 9\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   group1 variable   context   stat_name stat_label      stat\n1    trtn    respn stats_pr…    estimate  Rate Dif…     0.078\n2    trtn    respn stats_pr…   estimate1  Group 1 …     0.234\n3    trtn    respn stats_pr…   estimate2  Group 2 …     0.156\n4    trtn    respn stats_pr…   statistic  X-square…     1.893\n5    trtn    respn stats_pr…     p.value    p-value     0.169\n6    trtn    respn stats_pr…   parameter  Degrees …         1\n7    trtn    respn stats_pr…    conf.low  CI Lower…    -0.027\n8    trtn    respn stats_pr…   conf.high  CI Upper…     0.183\n9    trtn    respn stats_pr…      method     method 2-sample…\n10   trtn    respn stats_pr… alternative  alternat… two.sided\n11   trtn    respn stats_pr…           p          p          \n12   trtn    respn stats_pr…  conf.level  CI Confi…      0.95\n13   trtn    respn stats_pr…     correct  Yates' c…     FALSE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ 3 more variables: fmt_fn, warning, error\n```\n\n\n:::\n\n```{.r .cell-code}\ncardx::ard_stats_prop_test(\n  data = indat,\n  by = trtn,\n  variables = respn,\n  conf.level = 0.95,\n  correct = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n{cards} data frame: 13 x 9\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   group1 variable   context   stat_name stat_label      stat\n1    trtn    respn stats_pr…    estimate  Rate Dif…     0.078\n2    trtn    respn stats_pr…   estimate1  Group 1 …     0.234\n3    trtn    respn stats_pr…   estimate2  Group 2 …     0.156\n4    trtn    respn stats_pr…   statistic  X-square…      1.45\n5    trtn    respn stats_pr…     p.value    p-value     0.229\n6    trtn    respn stats_pr…   parameter  Degrees …         1\n7    trtn    respn stats_pr…    conf.low  CI Lower…    -0.037\n8    trtn    respn stats_pr…   conf.high  CI Upper…     0.193\n9    trtn    respn stats_pr…      method     method 2-sample…\n10   trtn    respn stats_pr… alternative  alternat… two.sided\n11   trtn    respn stats_pr…           p          p          \n12   trtn    respn stats_pr…  conf.level  CI Confi…      0.95\n13   trtn    respn stats_pr…     correct  Yates' c…      TRUE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ 3 more variables: fmt_fn, warning, error\n```\n\n\n:::\n:::\n\n\n\n### Normal Approximation (Wald) and Other Methods for 2 independent samples using {DescTools}\n\nFor more technical information regarding the derivations of these methods see the corresponding [SAS page](https://psiaims.github.io/CAMIS/SAS/ci_for_prop.html) or {DescTools} package documentation [here](https://search.r-project.org/CRAN/refmans/DescTools/html/BinomDiffCI.html). **The {DescTools} package** has a function BinomDiffCI which produces CIs for two independent proportions (unmatched pairs) including methods for Agresti/Caffo, Wald, Wald with Continuity correction, Newcombe Score, Newcombe score with continuity correction, and more computationally intensive (less commonly used) methods such as Miettinen and Nurminen, Mee, Brown Li's Jeffreys, Hauck-Anderson, Haldane and Jeffreys-Perks.\n\n#### Example code\n\nWith 2 groups, the null hypothesis that the proportions in each group are the same and a 2-sided CI.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_dat <- indat |>\n  count(trtn, respn)\ncount_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n   trtn respn     n\n  <dbl> <dbl> <int>\n1     0     0   118\n2     0     1    36\n3     1     0    65\n4     1     1    12\n```\n\n\n:::\n\n```{.r .cell-code}\n# BinomDiffCI requires\n# x1 = successes in active,  n1 = total subjects in active,\n# x2 = successes in placebo, n2 = total subjects in placebo\n\nDescTools::BinomDiffCI(\n  x1 = 36,\n  n1 = 154,\n  x2 = 12,\n  n2 = 77,\n  conf.level = 0.95,\n  sides = c(\"two.sided\"),\n  method = c(\n    \"wald\",\n    \"waldcc\",\n    \"score\",\n    \"scorecc\",\n    \"ac\",\n    \"mn\",\n    \"mee\",\n    \"blj\",\n    \"ha\",\n    \"hal\",\n    \"jp\"\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               est      lwr.ci    upr.ci\nwald    0.07792208 -0.02710792 0.1829521\nwaldcc  0.07792208 -0.03684818 0.1926923\nscore   0.07792208 -0.03614191 0.1751254\nscorecc 0.07792208 -0.04396244 0.1809901\nac      0.07792208 -0.03292487 0.1781699\nmn      0.07792208 -0.03606525 0.1774952\nmee     0.07792208 -0.03580439 0.1772849\nblj     0.07792208 -0.03062424 0.1810792\nha      0.07792208 -0.03415013 0.1899943\nhal     0.07792208 -0.03143484 0.1769438\njp      0.07792208 -0.03207751 0.1776615\n```\n\n\n:::\n:::\n\n\n\n## References\n\n1.  [pharmaverse cardx package](https://insightsengineering.github.io/cardx/main/#:~:text=The%20%7Bcardx%7D%20package%20is%20an%20extension%20of%20the,Data%20Objects%20%28ARDs%29%20using%20the%20R%20programming%20language.)\n2.  [PropCIs package](https://cran.r-project.org/web//packages/PropCIs/PropCIs.pdf)\n3.  D. Altman, D. Machin, T. Bryant, M. Gardner (eds). Statistics with Confidence: Confidence Intervals and Statistical Guidelines, 2nd edition. John Wiley and Sons 2000.\n4.  <https://www.lexjansen.com/wuss/2016/127_Final_Paper_PDF.pdf>\n",
    "supporting": [
      "ci_for_prop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}