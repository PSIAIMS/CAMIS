{
  "hash": "c72d4119c9f93c55e409825cd8c5d143",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Wilcoxon Rank Sum (Mann Whitney-U) in R\"\n---\n\n\n\n\n\n# Overview\n\nWilcoxon rank sum test, or equivalently, Mann-Whitney U-test is a rank based non-parametric method. The aim is to compare two independent groups of observations. Under certain scenarios, it can be thought of as a test for median differences, however this is only valid when: 1) both samples are independent and identically distributed (same dispersion, same shape, not necessarily normal) and 2) are symmetric around their medians.\n\nGenerally, with two samples of observations (A and B), the test uses the mean of each possible pair of observations in each group (including the pair of each value with itself) to test if the probability that (A\\>B) \\> probability (B\\>A).\n\nThe Wilcoxon rank sum test is often presented alongside a Hodges-Lehmann estimate of the pseudo-median (the median of the Walsh averages), and an associated confidence interval for the pseudo-median.\n\nA tie in the data exists when an observation in group A, has the same result as an observation in group B.\n\n## Available R packages\n\nThere are three main implementations of the Wilcoxon rank sum test in R.\n\n-   [stats::wilcox.test()](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/wilcox.test)\n\n-   [coin::wilcox_test()](https://cran.r-project.org/web/packages/coin/coin.pdf)\n\n-   [asht::wmwTest()](https://cran.r-project.org/web/packages/asht/asht.pdf)\n\nThe `stats` package implements various classic statistical tests, including Wilcoxon rank sum test. Although this is arguably the most commonly applied package, this one does not account for any ties in the data. To account for ties in the data, the `coin` or `asht` package should be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# x, y are two unpaired vectors. Do not necessary need to be of the same length.\nstats::wilcox.test(x, y, paired = FALSE)\n```\n:::\n\n\n\n## Example: Birth Weight\n\n*Data source: Table 30.4, Kirkwood BR. and Sterne JAC. Essentials of medical statistics. Second Edition. ISBN 978-0-86542-871-3*\n\nComparison of birth weights (kg) of children born to 15 non-smokers with those of children born to 14 heavy smokers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bw_ns: non smokers\n# bw_s: smokers\n# fmt: skip\nbw_ns <- c(3.99, 3.89, 3.6, 3.73, 3.31, \n            3.7, 4.08, 3.61, 3.83, 3.41, \n            4.13, 3.36, 3.54, 3.51, 2.71)\n# fmt: skip\nbw_s <- c(3.18, 2.74, 2.9, 3.27, 3.65, \n          3.42, 3.23, 2.86, 3.6, 3.65, \n          3.69, 3.53, 2.38, 2.34)\n```\n:::\n\n\n\nWe do note that there are ties present in the data. Can visualize the data on two histograms. Red lines indicate the location of medians.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\nhist(bw_ns, main = 'Birthweight: non-smokers')\nabline(v = median(bw_ns), col = 'red', lwd = 2)\nhist(bw_s, main = 'Birthweight: smokers')\nabline(v = median(bw_s), col = 'red', lwd = 2)\n```\n\n::: {.cell-output-display}\n![](nonpara_wilcoxon_ranksum_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nIt is possible to see that for non-smokers, the median birthweight is higher than those of smokers. Now we can formally test it with wilcoxon rank sum test.\n\n## stats::wilcox.test()\n\nIn `stats::wilcox.test()` the exact p-value is computed when there are less than 50 values and no ties otherwise the normal approximation is used. In our data case, because there are ties the normal approximation is used.\n\nThe default for the normal approximation is to use a continuity correction. One can add the argument `correct=FALSE` to not perform a continuity correction.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# default is two sided\nstats::wilcox.test(bw_s, bw_ns, paired = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE): cannot compute\nexact p-value with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  bw_s and bw_ns\nW = 45.5, p-value = 0.01001\nalternative hypothesis: true location shift is not equal to 0\n```\n\n\n:::\n\n```{.r .cell-code}\nstats::wilcox.test(bw_s, bw_ns, paired = FALSE, correct = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE, correct = FALSE):\ncannot compute exact p-value with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test\n\ndata:  bw_s and bw_ns\nW = 45.5, p-value = 0.009392\nalternative hypothesis: true location shift is not equal to 0\n```\n\n\n:::\n:::\n\n\n\nWe can also carry out a one-sided test, by specifying `alternative = \"less\"` (if the first group is expected to be smaller than the second group) or `alternative = \"greater\"`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# perform one-sided test\nstats::wilcox.test(bw_s, bw_ns, paired = FALSE, alternative = \"less\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE, alternative =\n\"less\"): cannot compute exact p-value with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  bw_s and bw_ns\nW = 45.5, p-value = 0.005003\nalternative hypothesis: true location shift is less than 0\n```\n\n\n:::\n:::\n\n\n\nBy setting `conf.int=TRUE` a confidence interval of the location parameter (x-y) is computed. Note that in the two-sample case the estimator for the difference in location parameters does not estimate the difference in medians (a common misconception) but rather the median of the difference between a sample from x and a sample from y. Note that the algorithm used for the estimation of the location parameter and confidence interval is not discussed in the help of the function (in the source code of the `stats::wilcox.test()` it is only mentioned that \"Algorithm not published, thus better documented here.\").\n\nBy default a 95% confidence interval is provided. This can be changed by the argument `conf.level`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add conf.int = TRUE\nstats::wilcox.test(bw_s, bw_ns, paired = FALSE, conf.int = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE, conf.int = TRUE):\ncannot compute exact p-value with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE, conf.int = TRUE):\ncannot compute exact confidence intervals with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  bw_s and bw_ns\nW = 45.5, p-value = 0.01001\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n -0.76995896 -0.09000999\nsample estimates:\ndifference in location \n            -0.4261377 \n```\n\n\n:::\n:::\n\n\n\nThe argument `exact = TRUE` can be added to ask for an exact p-value to be computed. However, in our data case as there are ties this does not work.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# force exact, but does not work because we have ties\nstats::wilcox.test(bw_s, bw_ns, paired = FALSE, conf.int = TRUE, exact = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE, conf.int = TRUE, :\ncannot compute exact p-value with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in wilcox.test.default(bw_s, bw_ns, paired = FALSE, conf.int = TRUE, :\ncannot compute exact confidence intervals with ties\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  bw_s and bw_ns\nW = 45.5, p-value = 0.01001\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n -0.76995896 -0.09000999\nsample estimates:\ndifference in location \n            -0.4261377 \n```\n\n\n:::\n:::\n\n\n\n## coin::wilcox_test()\n\nIn order to account for the ties, `wilcox_test` from the `coin` package should be used. For this function, the data needs to be inputted via a formula where the right hand side is a factor, so we need to create a dataset. In order to get results for *smokers - non-smokers* we need to relevel the factors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmk_data <- data.frame(\n  value = c(bw_ns, bw_s),\n  smoke = as.factor(rep(c(\"non\", \"smoke\"), c(length(bw_ns), length(bw_s))))\n)\nsmk_data$smoke <- forcats::fct_relevel(smk_data$smoke, \"smoke\")\nsmk_data$smoke\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] non   non   non   non   non   non   non   non   non   non   non   non  \n[13] non   non   non   smoke smoke smoke smoke smoke smoke smoke smoke smoke\n[25] smoke smoke smoke smoke smoke\nLevels: smoke non\n```\n\n\n:::\n:::\n\n\n\nNow the data is in the right shape we can run `wilcox_test`. By default, `coin::wilcox_test` does a normal approximation approach without continuity correction. One can add again `alternative=\"less\"` (or `alternative=\"greater\"`) for one-sided testing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin::wilcox_test(value ~ smoke, data = smk_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic Wilcoxon-Mann-Whitney Test\n\ndata:  value by smoke (smoke, non)\nZ = -2.5974, p-value = 0.009392\nalternative hypothesis: true mu is not equal to 0\n```\n\n\n:::\n:::\n\n\n\nWe do note that a normal approximation approach with continuity correction cannot be obtained with this function. One can add `correct=TRUE`, but note that no error is given and the results of a normal approximation approach without continuity correction is provided.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin::wilcox_test(value ~ smoke, data = smk_data, correct = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic Wilcoxon-Mann-Whitney Test\n\ndata:  value by smoke (smoke, non)\nZ = -2.5974, p-value = 0.009392\nalternative hypothesis: true mu is not equal to 0\n```\n\n\n:::\n:::\n\n\n\nBy including the `conf.int = TRUE` argument, confidence intervals for the difference in location are computed. According to the `coin` package documentation this is done according to Bauer (1972) \\[Bauer, D. F. (1972). Constructing confidence sets using rank statistics. Journal of the American Statistical Association 67(339), 687–690\\] and Hollander and Wolfe (1999) \\[Hollander, M. and Wolfe, D. A. (1999). Nonparametric Statistical Methods, Second Edition. New York: John Wiley & Sons.\\]. Note that the `conf.level` argument controls the confidence level, but must be used with `conf.int = TRUE` otherwise you won't get a confidence interval.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin::wilcox_test(value ~ smoke, data = smk_data, conf.int = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tAsymptotic Wilcoxon-Mann-Whitney Test\n\ndata:  value by smoke (smoke, non)\nZ = -2.5974, p-value = 0.009392\nalternative hypothesis: true mu is not equal to 0\n95 percent confidence interval:\n -0.76000001 -0.09999999\nsample estimates:\ndifference in location \n            -0.4261403 \n```\n\n\n:::\n:::\n\n\n\nUsing `coin` one can calculate exact and Monte Carlo conditional p-values using the `distribution` argument. The exact p-value is best used in small sample sizes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin::wilcox_test(\n  value ~ smoke,\n  data = smk_data,\n  conf.int = TRUE,\n  distribution = \"exact\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tExact Wilcoxon-Mann-Whitney Test\n\ndata:  value by smoke (smoke, non)\nZ = -2.5974, p-value = 0.008181\nalternative hypothesis: true mu is not equal to 0\n95 percent confidence interval:\n -0.76 -0.10\nsample estimates:\ndifference in location \n                -0.425 \n```\n\n\n:::\n:::\n\n\n\n\nFor doing an approximative (Monte Carlo) (with 500 and 500000 samples) the following code can be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoin::wilcox_test(\n  value ~ smoke,\n  data = smk_data,\n  conf.int = TRUE,\n  distribution = approximate(nresample = 500)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tApproximative Wilcoxon-Mann-Whitney Test\n\ndata:  value by smoke (smoke, non)\nZ = -2.5974, p-value = 0.004\nalternative hypothesis: true mu is not equal to 0\n95 percent confidence interval:\n -0.71 -0.10\nsample estimates:\ndifference in location \n                -0.425 \n```\n\n\n:::\n\n```{.r .cell-code}\ncoin::wilcox_test(\n  value ~ smoke,\n  data = smk_data,\n  conf.int = TRUE,\n  distribution = approximate(nresample = 500000)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tApproximative Wilcoxon-Mann-Whitney Test\n\ndata:  value by smoke (smoke, non)\nZ = -2.5974, p-value = 0.00827\nalternative hypothesis: true mu is not equal to 0\n95 percent confidence interval:\n -0.77 -0.10\nsample estimates:\ndifference in location \n                -0.425 \n```\n\n\n:::\n:::\n\n\n\n<!-- *Note:* the distribution argument only effects the p-value and estimate of difference in location. In contrast, `coin` consistently calculated the exact Hodges-Lehmann confidence intervals. -->\n\n\n## asht::wmwTest()\n\nThe `asht::wmwTest()` function calculates the Wilcoxon-Mann-Whitney test (normal approximation, exact complete enumeration, and exact Monte Carlo implementation) together with confidence intervals on the Mann-Whitney parameter, Pr[X<Y] + 0.5 Pr[X=Y].\n\nBy default, the function returns the normal approximation using a continuity correction when $combination(m+n, m)>5000$, where $m$ and $n$ are the sample sizes in the two groups, respectively. Otherwise by default (thus for small sample sizes), the exact Wilcoxon rank sum test is performed. The `correct` argument is available to turn-off the continuity correction. The `alternative` argument is available for one-sided testing. By default, the 95% confidence interval is calculated for the Mann-Whitney parameter (use argument `conf.int` and `conf.level` to change these defaults.). Details on the calculation of the confidence interval are provided in Newcombe (2006) \\[Newcombe, Robert G. (2006). Confidence intervals for an effect size measure based on the Mann-Whitney statistic. Part 2: asymptotic methods and evaluation. Statistics in medicine 25(4): 559-573\\].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasht::wmwTest(bw_s, bw_ns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWilcoxon-Mann-Whitney test with continuity correction (confidence\n\tinterval requires proportional odds assumption, but test does not)\n\ndata:  bw_s and bw_ns\nMann-Whitney estimate = 0.78333, tie factor = 0.99951, p-value =\n0.01001\nalternative hypothesis: two distributions are not equal\n95 percent confidence interval:\n 0.5696522 0.9030435\nsample estimates:\nMann-Whitney estimate \n            0.7833333 \n```\n\n\n:::\n:::\n\n\n\nUsing the `method` argument one can change from normal approximation to exact complete enumeration (`method = \"exact.ce\"`), and exact Monte Carlo (`method = \"exact.mc\"`) implementation. When `method = \"exact.mc\"`, the test is implemented using complete enumeration of all permutations, and hence is only tractible for very small sample sizes (less than 10 in each group). Here, we show an example of `method = \"exact.mc\"`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasht::wmwTest(\n  bw_s,\n  bw_ns,\n  method = \"exact.mc\",\n  control = asht::wmwControl(nMC = 100000)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\texact Wilcoxon-Man-Whitney test (Monte Carlo with nMC=1e+05)\n\t(confidence interval requires proportional odds assumption, but test\n\tdoes not)\n\ndata:  bw_s and bw_ns\nMann-Whitney estimate = 0.78333, p-value = 0.00768\nalternative hypothesis: two distributions are not equal\n95 percent confidence interval:\n 0.5794248 0.9237564\nsample estimates:\nMann-Whitney estimate \n            0.7833333 \n```\n\n\n:::\n:::\n\n\n\n\n## Useful References\n\n-   [Methods and Formulae](https://support.minitab.com/en-us/minitab/help-and-how-to/statistics/nonparametrics/how-to/1-sample-wilcoxon/methods-and-formulas/methods-and-formulas)\n-   [Mann Whitney is not about medians in general](https://github.com/adrianolszewski/Mann-Whitney-is-not-about-medians-in-general/blob/main/Mann_Whitney_Wilcoxon_fails_as_test_of_medians_literature.md)\n-   [Relationship between walsh averages and WRS](https://stats.stackexchange.com/questions/215889/prove-the-relationship-between-walsh-averages-and-wilcoxon-signed-rank-test)\n-   [Hodges Lehmann Problems](https://aakinshin.net/posts/r-hodges-lehmann-problems)\n",
    "supporting": [
      "nonpara_wilcoxon_ranksum_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}