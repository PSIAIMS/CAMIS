{
  "hash": "6d663915c0d1ee4cbb33c31cbf255f13",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple Imputaton: Linear Regression\"\n---\n\n\n\n## Overview\n\nMultiple imputation with regression is one step further from mean imputation (i.e. by a single value: the average of observed). In the case for continuous, normally distributed variable, linear regression can use information from other variables hence *could* be closer to the true missing values.\n\n\n## Imputation with `mice`\n\n[mice](https://amices.org/mice/index.html) is a powerful R package developed by Stef van Buuren, Karin Groothuis-Oudshoorn and other contributors. **Regression methods** (continuous, normal outcome) are implemented in `mice` with methods starting with `norm`.\n\n\n* Linear regression without parameter uncertainty, [mice.impute.norm.nob](https://amices.org/mice/reference/mice.impute.norm.nob.html)\n* Linear regression through prediction, [mice.impute.norm.predict](https://amices.org/mice/reference/mice.impute.norm.predict.html)\n* Bayesian linear regression, [mice.impute.norm](https://amices.org/mice/reference/mice.impute.norm.html)\n* Linear regression bootstrap, [mice.impute.norm.boot](https://amices.org/mice/reference/mice.impute.norm.boot.html)\n\n\n## Example\n\nHere I use the small dataset `nhanes` included in `mice` package. It has 25 rows, and three out of four variables have missings. \n\nThe original NHANES data is a large national level survey, some are publicly available via R package `nhanes`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mice)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'mice'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    cbind, rbind\n```\n\n\n:::\n\n```{.r .cell-code}\n# load example dataset from mice\nhead(nhanes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age  bmi hyp chl\n1   1   NA  NA  NA\n2   2 22.7   1 187\n3   1   NA   1 187\n4   3   NA  NA  NA\n5   1 20.4   1 113\n6   3   NA  NA 184\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(nhanes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      age            bmi             hyp             chl       \n Min.   :1.00   Min.   :20.40   Min.   :1.000   Min.   :113.0  \n 1st Qu.:1.00   1st Qu.:22.65   1st Qu.:1.000   1st Qu.:185.0  \n Median :2.00   Median :26.75   Median :1.000   Median :187.0  \n Mean   :1.76   Mean   :26.56   Mean   :1.235   Mean   :191.4  \n 3rd Qu.:2.00   3rd Qu.:28.93   3rd Qu.:1.000   3rd Qu.:212.0  \n Max.   :3.00   Max.   :35.30   Max.   :2.000   Max.   :284.0  \n                NA's   :9       NA's   :8       NA's   :10     \n```\n\n\n:::\n:::\n\n\n\nExamine missing pattern with `md.pattern(data)`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 27 missing in total\n# by col: 8 for hyp, 9 for bmi, 10 for chl\n# by row: n missing numbers\n\nmd.pattern(nhanes)\n```\n\n::: {.cell-output-display}\n![](mi_mar_regression_files/figure-html/missing-pattern-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age hyp bmi chl   \n13   1   1   1   1  0\n3    1   1   1   0  1\n1    1   1   0   1  1\n1    1   0   0   1  2\n7    1   0   0   0  3\n     0   8   9  10 27\n```\n\n\n:::\n:::\n\n\n\n\n### Regression without parameter uncertainty\n\nWe can generate two imputed datasets by setting `m=2`. \n\nThere is a certain level of randomness, so would be a good idea to set seed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nimpr0 <- mice(nhanes, method = 'norm.nob', m=2, maxit = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n iter imp variable\n  1   1  bmi  hyp  chl\n  1   2  bmi  hyp  chl\n```\n\n\n:::\n\n```{.r .cell-code}\nimpr0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nClass: mids\nNumber of multiple imputations:  2 \nImputation methods:\n       age        bmi        hyp        chl \n        \"\" \"norm.nob\" \"norm.nob\" \"norm.nob\" \nPredictorMatrix:\n    age bmi hyp chl\nage   0   1   1   1\nbmi   1   0   1   1\nhyp   1   1   0   1\nchl   1   1   1   0\n```\n\n\n:::\n\n```{.r .cell-code}\nnhanes_impr0 <- complete(impr0) # by default, returns the first imputation\nnhanes_impr0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age      bmi       hyp      chl\n1    1 35.53430 1.2503841 256.6153\n2    2 22.70000 1.0000000 187.0000\n3    1 27.31412 1.0000000 187.0000\n4    3 25.31243 2.3880837 267.1435\n5    1 20.40000 1.0000000 113.0000\n6    3 17.94547 1.5855064 184.0000\n7    1 22.50000 1.0000000 118.0000\n8    1 30.10000 1.0000000 187.0000\n9    2 22.00000 1.0000000 238.0000\n10   2 26.99782 1.0810473 206.9927\n11   1 32.71511 0.7819353 213.7222\n12   2 27.65399 0.7904680 209.6716\n13   3 21.70000 1.0000000 206.0000\n14   2 28.70000 2.0000000 204.0000\n15   1 29.60000 1.0000000 252.1596\n16   1 27.47980 0.6071353 145.9557\n17   3 27.20000 2.0000000 284.0000\n18   2 26.30000 2.0000000 199.0000\n19   1 35.30000 1.0000000 218.0000\n20   3 25.50000 2.0000000 245.7884\n21   1 35.12809 0.5807116 232.4652\n22   1 33.20000 1.0000000 229.0000\n23   1 27.50000 1.0000000 131.0000\n24   3 24.90000 1.0000000 268.3929\n25   2 27.40000 1.0000000 186.0000\n```\n\n\n:::\n:::\n\n\nWhen we have two imputed datasets, we can check the values for each of the variables. For example, extract `bmi` variable from the imputed data `imp`,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# two imputed datasets (m=2)\nimpr0$imp$bmi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          1        2\n1  35.53430 32.26078\n3  27.31412 22.55473\n4  25.31243 14.90410\n6  17.94547 22.59196\n10 26.99782 25.08534\n11 32.71511 27.71485\n12 27.65399 25.76286\n16 27.47980 30.34985\n21 35.12809 29.89142\n```\n\n\n:::\n:::\n\n\n\nWe can also specify which imputed dataset to use as our complete data. Set index to 0 (`action = 0`) returns the original dataset with missing values.\n\nHere we check which of the imputed data is being used as the completed dataset. First take a note of the row IDs (based on `bmi`, for example). Then we generate completed dataset. \n\n* if no `action` argument is set, then it returns the first imputation by default\n* `action=0` corresponds to the original data with missing values\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check which imputed data is used for the final result, take note of row id\nid_missing <- which(is.na(nhanes$bmi))\nid_missing\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  3  4  6 10 11 12 16 21\n```\n\n\n:::\n\n```{.r .cell-code}\nnhanes_impr0_action0 <- complete(impr0, action = 0) \nnhanes_impr0_action0[id_missing, ] # original data with missing bmi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age bmi hyp chl\n1    1  NA  NA  NA\n3    1  NA   1 187\n4    3  NA  NA  NA\n6    3  NA  NA 184\n10   2  NA  NA  NA\n11   1  NA  NA  NA\n12   2  NA  NA  NA\n16   1  NA  NA  NA\n21   1  NA  NA  NA\n```\n\n\n:::\n\n```{.r .cell-code}\nnhanes_impr0_action1 <- complete(impr0, action = 1) \nnhanes_impr0_action1[id_missing, ] # using first imputation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age      bmi       hyp      chl\n1    1 35.53430 1.2503841 256.6153\n3    1 27.31412 1.0000000 187.0000\n4    3 25.31243 2.3880837 267.1435\n6    3 17.94547 1.5855064 184.0000\n10   2 26.99782 1.0810473 206.9927\n11   1 32.71511 0.7819353 213.7222\n12   2 27.65399 0.7904680 209.6716\n16   1 27.47980 0.6071353 145.9557\n21   1 35.12809 0.5807116 232.4652\n```\n\n\n:::\n\n```{.r .cell-code}\nnhanes_impr0_action2 <- complete(impr0, action = 2) \nnhanes_impr0_action2[id_missing, ] # using second imputation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   age      bmi       hyp      chl\n1    1 32.26078 0.4616324 228.0022\n3    1 22.55473 1.0000000 187.0000\n4    3 14.90410 1.4558818 212.7958\n6    3 22.59196 1.7664882 184.0000\n10   2 25.08534 1.2940549 201.5872\n11   1 27.71485 0.9410698 169.2427\n12   2 25.76286 1.3570093 168.5961\n16   1 30.34985 0.6878971 163.7262\n21   1 29.89142 1.0452062 212.9144\n```\n\n\n:::\n:::\n\n\n\n\n### Other imputation by linear regression\n\nOther various of imputaton via linear regression can be implemented simply by changing the method argument.\n\n* Linear regression through prediction, [mice.impute.norm.predict](https://amices.org/mice/reference/mice.impute.norm.predict.html)\n* Bayesian linear regression, [mice.impute.norm](https://amices.org/mice/reference/mice.impute.norm.html)\n* Linear regression bootstrap, [mice.impute.norm.boot](https://amices.org/mice/reference/mice.impute.norm.boot.html)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimpr <- mice(nhanes, method = 'norm.predict', m=1, maxit=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n iter imp variable\n  1   1  bmi  hyp  chl\n```\n\n\n:::\n\n```{.r .cell-code}\nimpr$imp$bmi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          1\n1  28.33396\n3  28.33396\n4  22.75613\n6  21.17519\n10 27.19573\n11 29.12443\n12 26.26576\n16 30.28688\n21 28.33396\n```\n\n\n:::\n:::\n\n\n\nBayesian linear regression\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimpb <- mice(nhanes, method = 'norm', m=1, maxit=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n iter imp variable\n  1   1  bmi  hyp  chl\n```\n\n\n:::\n\n```{.r .cell-code}\nimpb$imp$bmi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          1\n1  33.82959\n3  28.98754\n4  20.88810\n6  19.11391\n10 27.32990\n11 29.44117\n12 22.68062\n16 32.13267\n21 22.03164\n```\n\n\n:::\n\n```{.r .cell-code}\n# nhanes_impb <- complete(impb)\n```\n:::\n\n\n\nBootstrap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimpbt <- mice(nhanes, method = 'norm.boot', m=1, maxit=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n iter imp variable\n  1   1  bmi  hyp  chl\n```\n\n\n:::\n\n```{.r .cell-code}\nimpbt$imp$bmi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          1\n1  24.19248\n3  28.77464\n4  22.42321\n6  23.47542\n10 21.95529\n11 23.12703\n12 25.84230\n16 27.68216\n21 26.43770\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n# Reference\n\nStef van Buuren, Karin Groothuis-Oudshoorn (2011). mice: Multivariate Imputation by Chained Equations in R. Journal of Statistical Software, 45(3), 1-67. DOI 10.18637/jss.v045.i03\n\n",
    "supporting": [
      "mi_mar_regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}