{
  "hash": "9e1c5eafe96d1983aacaf09d08b7969a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Two Sample t-test\"\noutput: html_document\n---\n\n\n\n\n\n# **Two Sample t-test in R**\n\nThe Two Sample t-test is used to compare two independent samples against each other. In the Two Sample t-test, the mean of the first sample is compared against the mean of the second sample. In R, a Two Sample t-test can be performed using the Base R `t.test()` function from the **stats** package or the `proc_ttest()` function from the **procs** package.\n\n### Data Used\n\nThe following data was used in this example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create sample data\nd1 <- tibble::tribble(\n  ~trt_grp,\t~WtGain,\n  \"placebo\",\t94, \"placebo\",\t12, \"placebo\",\t26, \"placebo\",\t89,\n  \"placebo\",\t88, \"placebo\",\t96, \"placebo\",\t85, \"placebo\",\t130,\n  \"placebo\",\t75, \"placebo\",\t54, \"placebo\",\t112, \"placebo\",\t69,\n  \"placebo\",\t104, \"placebo\",\t95, \"placebo\",\t53, \"placebo\",\t21,\n  \"treatment\",\t45, \"treatment\",\t62, \"treatment\",\t96, \"treatment\",\t128,\n  \"treatment\",\t120, \"treatment\",\t99, \"treatment\",\t28, \"treatment\",\t50,\n  \"treatment\",\t109, \"treatment\",\t115, \"treatment\",\t39, \"treatment\",\t96,\n  \"treatment\",\t87, \"treatment\",\t100, \"treatment\",\t76, \"treatment\",\t80\n)\n```\n:::\n\n\n\n## Base R\n\nIf we have normalized data, we can use the classic Student's t-test. For a Two sample test where the variances are not equal, we should use the Welch's t-test. Both of those options are available with the Base R `t.test()` function.\n\n### Student's T-Test {#baseS}\n\n#### Code\n\nThe following code was used to test the comparison in Base R. By default, the R two sample t-test function assumes the variances in the data are unequal, and uses a Welch's t-test. Therefore, to use a classic Student's t-test with normalized data, we must specify `var.equal = TRUE`.\nAlso note that we must separate the single variable into two variables to satisfy the `t.test()` syntax and set `paired = FALSE`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  d1p <- dplyr::filter(d1, trt_grp == 'placebo')\n  d1t <- dplyr::filter(d1, trt_grp == 'treatment')\n\n  # Perform t-test\n  t.test(d1p$WtGain, d1t$WtGain, \n       var.equal = TRUE, paired = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  d1p$WtGain and d1t$WtGain\nt = -0.6969, df = 30, p-value = 0.4912\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -31.19842  15.32342\nsample estimates:\nmean of x mean of y \n  75.1875   83.1250 \n```\n\n\n:::\n:::\n\n\n\n### Welch's T-Test {#baseW}\n\n#### Code\n\nThe following code was used to test the comparison in Base R using Welch's t-test. Observe that in this case, the `var.equal` parameter is set to FALSE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  d1p <- dplyr::filter(d1, trt_grp == 'placebo')\n  d1t <- dplyr::filter(d1, trt_grp == 'treatment')\n\n  # Perform t-test\n  t.test(d1p$WtGain, d1t$WtGain, \n       var.equal = FALSE, paired = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  d1p$WtGain and d1t$WtGain\nt = -0.6969, df = 29.694, p-value = 0.4913\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -31.20849  15.33349\nsample estimates:\nmean of x mean of y \n  75.1875   83.1250 \n```\n\n\n:::\n:::\n\n\n\n## Procs Package\n\n### Student's T-Test and Welch's T-Test {#procs}\n\n#### Code\n\nThe following code from the **procs** package was used to perform a two sample t-test. Note that the `proc_ttest()` function performs both the Student's t-test and Welch's (Satterthwaite) t-test in the same call. The results are displayed on separate rows. This output is similar to SAS.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  library(procs)\n\n  # Perform t-test\n  proc_ttest(d1, var = WtGain,\n             class = trt_grp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Statistics\n     VAR      CLASS        METHOD  N    MEAN      STD    STDERR MIN MAX\n1 WtGain    placebo          <NA> 16 75.1875 33.81167  8.452918  12 130\n2 WtGain  treatment          <NA> 16 83.1250 30.53495  7.633738  28 128\n3 WtGain Diff (1-2)        Pooled NA -7.9375       NA 11.389723  NA  NA\n4 WtGain Diff (1-2) Satterthwaite NA -7.9375       NA 11.389723  NA  NA\n\n$ConfLimits\n     VAR      CLASS        METHOD    MEAN      LCLM     UCLM      STD  LCLMSTD\n1 WtGain    placebo          <NA> 75.1875  57.17053 93.20447 33.81167 24.97685\n2 WtGain  treatment          <NA> 83.1250  66.85407 99.39593 30.53495 22.55632\n3 WtGain Diff (1-2)        Pooled -7.9375 -31.19842 15.32342       NA       NA\n4 WtGain Diff (1-2) Satterthwaite -7.9375 -31.20849 15.33349       NA       NA\n   UCLMSTD\n1 52.33003\n2 47.25868\n3       NA\n4       NA\n\n$TTests\n     VAR        METHOD VARIANCES       DF          T     PROBT\n1 WtGain        Pooled     Equal 30.00000 -0.6969002 0.4912306\n2 WtGain Satterthwaite   Unequal 29.69359 -0.6969002 0.4912856\n\n$Equality\n     VAR   METHOD NDF DDF     FVAL     PROBF\n1 WtGain Folded F  15  15 1.226136 0.6980614\n```\n\n\n:::\n:::\n\n\n\nViewer Output:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/ttest/twosample_rtest1.png){fig-align='center' width=50%}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}