{
  "hash": "12e56fc68980beb934cc8aa760497d82",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Chi-Square Association/Fisher's exact\"\n---\n\n\n## Introduction\n\nThe chi-square test is a non-parametric statistical test used to determine whether there is a significant association within the categorical variables. It compares the observed frequencies in a contingency table with the frequency we would expect if the variables were independent. The chi-square test calculates a test statistic, often denoted as χ² (chi-square), which follows chi-square distribution, we can determine whether the association between the variables are statistically significant.\n\nThe chi-squared test and Fisher's exact test can assess for independence between two variables when the comparing groups are independent and not correlated. The chi-squared test applies an approximation assuming the sample is large, while the Fisher's exact test runs an exact procedure especially for small-sized samples.\n\n## Data used \n\nTo perform the analysis the data used is: *Loprinzi CL. Laurie JA. Wieand HS. Krook JE. Novotny PJ. Kugler JW. Bartel J. Law M. Bateman M. Klatt NE. et al. Prospective evaluation of prognostic variables from patient-completed questionnaires. North Central Cancer Treatment Group. Journal of Clinical Oncology. 12(3):601-7, 1994*.\n\n## Implementing Chi-Square test in Python\n\n We can use crosstab() function to create contingency table of two selected variables.\n\n::: {#2136395c .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd \nimport numpy as np\nimport scipy.stats as stats \n\n# Read the sample data\ndata = pd.read_csv(\"../data/lung_cancer.csv\") \n\n# Removing undesired rows\ndf= data.dropna(subset=['ph.ecog','wt.loss']) \n\n# Converting numerical variable into categorical variable\n\ndf['ecog_grp']= np.where(df['ph.ecog']>0, \"fully active\",\"symptomatic\")\nprint(df['ecog_grp'])\ndf['wt_grp'] = np.where(df['wt.loss']>0, \"weight loss\", \"weight gain\")\n\ncontingency_table= pd.crosstab(df['ecog_grp'],df['wt_grp'])\ncontingency_table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1       symptomatic\n2       symptomatic\n3      fully active\n4       symptomatic\n5      fully active\n           ...     \n223    fully active\n224     symptomatic\n225    fully active\n226    fully active\n227    fully active\nName: ecog_grp, Length: 213, dtype: object\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\ljohn71\\AppData\\Local\\Temp\\ipykernel_3724\\2909872460.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['ecog_grp']= np.where(df['ph.ecog']>0, \"fully active\",\"symptomatic\")\nC:\\Users\\ljohn71\\AppData\\Local\\Temp\\ipykernel_3724\\2909872460.py:15: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df['wt_grp'] = np.where(df['wt.loss']>0, \"weight loss\", \"weight gain\")\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>wt_grp</th>\n      <th>weight gain</th>\n      <th>weight loss</th>\n    </tr>\n    <tr>\n      <th>ecog_grp</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>fully active</th>\n      <td>39</td>\n      <td>113</td>\n    </tr>\n    <tr>\n      <th>symptomatic</th>\n      <td>22</td>\n      <td>39</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFurthermore, the chi2_contingency() function in scipy.stats library in Python can be used to implement Chi-square test. \n\n::: {#917d2939 .cell execution_count=2}\n``` {.python .cell-code}\n# Parsing the values from the contingency table\nvalue = np.array([contingency_table.iloc[0][0:5].values,\n                  contingency_table.iloc[1][0:5].values])\n\nstatistic, p, dof, expected = stats.chi2_contingency(value)\n\nprint(\"The chi2 value is:\", statistic)\nprint(\"The p value is:\", p)\nprint(\"The degree of freedom is:\", dof)\nprint(\"The expected values are:\", expected)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe chi2 value is: 1.8260529076055192\nThe p value is: 0.17659446865934614\nThe degree of freedom is: 1\nThe expected values are: [[ 43.53051643 108.46948357]\n [ 17.46948357  43.53051643]]\n```\n:::\n:::\n\n\n## Implementing Fisher exact test in Python\n\nTo implement Fischer's exact test in Python, we can use the fischer_exact() function from the stats module in SciPy library. It returns *SignificanceResult* object with statistic and pvalue as it's attributes.\n\n::: {#c5353bec .cell execution_count=3}\n``` {.python .cell-code}\nstats.fisher_exact(value, alternative=\"two-sided\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nSignificanceResult(statistic=np.float64(0.6118262268704746), pvalue=np.float64(0.13500579984749855))\n```\n:::\n:::\n\n\n",
    "supporting": [
      "chi-square_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}