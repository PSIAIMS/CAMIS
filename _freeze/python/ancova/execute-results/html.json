{
  "hash": "8b3a61ff28608e9874519d06a7000bc6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Ancova\"\noutput: html_document\n---\n\n\n## Introduction\n\nIn this example, we're looking at [Analysis of Covariance](https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_glm_examples04.htm). ANCOVA is typically used to analyse treatment differences, to see examples of prediction models go to the [simple linear regression page](linear_regression.qmd).\n\n## Data Summary\n\n::: {#8630004c .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Input data\ndata = {\n    'drug': [\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\",\n             \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\",\n             \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\"],\n    'pre': [11, 8, 5, 14, 19, 6, 10, 6, 11, 3,\n            6, 6, 7, 8, 18, 8, 19, 8, 5, 15,\n            16, 13, 11, 9, 21, 16, 12, 12, 7, 12],\n    'post': [6, 0, 2, 8, 11, 4, 13, 1, 8, 0,\n             0, 2, 3, 1, 18, 4, 14, 9, 1, 9,\n             13, 10, 18, 5, 23, 12, 5, 16, 1, 20]\n}\n\ndf = pd.DataFrame(data)\n```\n:::\n\n\n::: {#5756a228 .cell execution_count=2}\n``` {.python .cell-code}\n# Descriptive statistics\nsummary_stats = df.describe()\n\n# Calculate median\nmedian_pre = df['pre'].median()\nmedian_post = df['post'].median()\n\n# Add median to the summary statistics\nsummary_stats.loc['median'] = [median_pre, median_post]\n\nprint(summary_stats)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              pre       post\ncount   30.000000  30.000000\nmean    10.733333   7.900000\nstd      4.791755   6.666178\nmin      3.000000   0.000000\n25%      7.000000   2.000000\n50%     10.500000   7.000000\n75%     13.750000  12.750000\nmax     21.000000  23.000000\nmedian  10.500000   7.000000\n```\n:::\n:::\n\n\n## Ancova in Python\n\nIn Python, Ancova can be performed using the [statsmodels](https://www.statsmodels.org/stable/index.html) library from the scipy package.\n\n::: {#fc31e7e3 .cell execution_count=3}\n``` {.python .cell-code}\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom tabulate import tabulate\n\n# Fit the ANCOVA model\nmodel_ancova = smf.ols('post ~ drug + pre', data=df).fit()\n\n# Summary of the model\nmodel_summary = model_ancova.summary()\nprint(model_summary)\n\n# Extracting glance (summary) information\nmodel_glance = {\n    'r_squared': model_ancova.rsquared,\n    'adj_r_squared': model_ancova.rsquared_adj,\n    'f_statistic': model_ancova.fvalue,\n    'f_pvalue': model_ancova.f_pvalue,\n    'aic': model_ancova.aic,\n    'bic': model_ancova.bic\n}\nmodel_glance_df = pd.DataFrame([model_glance])\nprint(tabulate(model_glance_df, headers='keys', tablefmt='grid'))\n\n# Extracting tidy (coefficients) information\nmodel_tidy = model_ancova.summary2().tables[1]\nprint(tabulate(model_tidy, headers='keys', tablefmt='grid'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   post   R-squared:                       0.676\nModel:                            OLS   Adj. R-squared:                  0.639\nMethod:                 Least Squares   F-statistic:                     18.10\nDate:                Mon, 18 Aug 2025   Prob (F-statistic):           1.50e-06\nTime:                        22:09:24   Log-Likelihood:                -82.054\nNo. Observations:                  30   AIC:                             172.1\nDf Residuals:                      26   BIC:                             177.7\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     -3.8808      1.986     -1.954      0.062      -7.964       0.202\ndrug[T.D]      0.1090      1.795      0.061      0.952      -3.581       3.799\ndrug[T.F]      3.4461      1.887      1.826      0.079      -0.432       7.324\npre            0.9872      0.164      6.001      0.000       0.649       1.325\n==============================================================================\nOmnibus:                        2.609   Durbin-Watson:                   2.526\nProb(Omnibus):                  0.271   Jarque-Bera (JB):                2.148\nSkew:                           0.645   Prob(JB):                        0.342\nKurtosis:                       2.765   Cond. No.                         39.8\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n+----+-------------+-----------------+---------------+-------------+---------+---------+\n|    |   r_squared |   adj_r_squared |   f_statistic |    f_pvalue |     aic |     bic |\n+====+=============+=================+===============+=============+=========+=========+\n|  0 |    0.676261 |        0.638906 |       18.1039 | 1.50137e-06 | 172.108 | 177.712 |\n+----+-------------+-----------------+---------------+-------------+---------+---------+\n+-----------+-----------+------------+------------+-------------+-----------+----------+\n|           |     Coef. |   Std.Err. |          t |       P>|t| |    [0.025 |   0.975] |\n+===========+===========+============+============+=============+===========+==========+\n| Intercept | -3.88081  |   1.9862   | -1.95388   | 0.0615519   | -7.96351  | 0.201887 |\n+-----------+-----------+------------+------------+-------------+-----------+----------+\n| drug[T.D] |  0.108971 |   1.79514  |  0.0607037 | 0.952059    | -3.58098  | 3.79892  |\n+-----------+-----------+------------+------------+-------------+-----------+----------+\n| drug[T.F] |  3.44614  |   1.88678  |  1.82646   | 0.0792846   | -0.432195 | 7.32447  |\n+-----------+-----------+------------+------------+-------------+-----------+----------+\n| pre       |  0.987184 |   0.164498 |  6.00121   | 2.45433e-06 |  0.649054 | 1.32531  |\n+-----------+-----------+------------+------------+-------------+-----------+----------+\n```\n:::\n:::\n\n\nPlease note that all values match with the corresponding [R version](https://psiaims.github.io/CAMIS/R/ancova.html), except for the AIC and BIC values, which differ slightly. This should be acceptable for most practical purposes in statistical analysis. Currently, there are [ongoing discussions](https://github.com/statsmodels/statsmodels/issues/1802) in the statsmodels community regarding the computational details of AIC and BIC.\n\nThe following code can be used to enforce complete consistency of AIC and BIC values with R outputs by adding 1 to the number of parameters:\n\n::: {#bb84500a .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\n\n# Manual calculation of AIC and BIC to ensure consistency with R\nn = df.shape[0]  # number of observations\nk = model_ancova.df_model + 1  # number of parameters (including intercept)\nlog_lik = model_ancova.llf  # log-likelihood\n\n# Adjusted number of parameters (including scale parameter)\nk_adjusted = k + 1\n\n# Manually calculate AIC and BIC to match R's behavior\naic_adjusted = 2 * k_adjusted - 2 * log_lik\nbic_adjusted = np.log(n) * k_adjusted - 2 * log_lik\n\nprint(f\"Number of observations (n): {n}\")\nprint(f\"Number of parameters (k_adjusted): {k_adjusted}\")\nprint(f\"Log-likelihood: {log_lik}\")\nprint(f\"AIC (adjusted): {aic_adjusted}\")\nprint(f\"BIC (adjusted): {bic_adjusted}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of observations (n): 30\nNumber of parameters (k_adjusted): 5.0\nLog-likelihood: -82.0537744890265\nAIC (adjusted): 174.107548978053\nBIC (adjusted): 181.11353588636376\n```\n:::\n:::\n\n\nThere are different types of anova computations. The [statsmodels.stats.anova.anova_lm](https://www.statsmodels.org/stable/generated/statsmodels.stats.anova.anova_lm.html) function allows the types 1, 2 and 3. The code to compute these types is depicted below:\n\n::: {#2385dfc5 .cell execution_count=5}\n``` {.python .cell-code}\nimport statsmodels.formula.api as smf\nimport statsmodels.stats.anova as ssa\n\n# Center the predictor for Type III anova\n#df['pre_centered'] = df['pre'] - df['pre'].mean()\n\n# Fit the model for types I and II anova\nmodel = smf.ols('post ~ C(drug) + pre', data=df).fit()\n\n# Perform anova for types I and II\nancova_table_type_1 = ssa.anova_lm(model, typ=1)\nancova_table_type_2 = ssa.anova_lm(model, typ=2)\n\n# Fit the model for Type III anova with centered predictors\nmodel_type_3 = smf.ols('post ~ C(drug) + pre', data=df).fit()\nancova_table_type_3 = ssa.anova_lm(model_type_3, typ=3)\n\n# Calculate SSd (sum of squares for residuals)\nssd_type1 = ancova_table_type_1['sum_sq'].loc['Residual']\nssd_type2 = ancova_table_type_2['sum_sq'].loc['Residual']\nssd_type3 = ancova_table_type_3['sum_sq'].loc['Residual']\n\n# Calculate ges\nancova_table_type_1['ges'] = ancova_table_type_1['sum_sq'] / (ancova_table_type_1['sum_sq'] + ssd_type1)\nancova_table_type_2['ges'] = ancova_table_type_2['sum_sq'] / (ancova_table_type_2['sum_sq'] + ssd_type2)\nancova_table_type_3['ges'] = ancova_table_type_3['sum_sq'] / (ancova_table_type_3['sum_sq'] + ssd_type3)\n\n# Add SSd column\nancova_table_type_1['SSd'] = ssd_type1\nancova_table_type_2['SSd'] = ssd_type2\nancova_table_type_3['SSd'] = ssd_type3\n\n# Add significance column\nancova_table_type_1['p<0.05'] = ancova_table_type_1['PR(>F)'] < 0.05\nancova_table_type_2['p<0.05'] = ancova_table_type_2['PR(>F)'] < 0.05\nancova_table_type_3['p<0.05'] = ancova_table_type_3['PR(>F)'] < 0.05\n\n# Rename columns to match the R output\nancova_table_type_1.rename(columns={'sum_sq': 'SSn', 'df': 'DFn', 'F': 'F', 'PR(>F)': 'p'}, inplace=True)\nancova_table_type_1.reset_index(inplace=True)\nancova_table_type_1.rename(columns={'index': 'Effect'}, inplace=True)\n\nancova_table_type_2.rename(columns={'sum_sq': 'SSn', 'df': 'DFn', 'F': 'F', 'PR(>F)': 'p'}, inplace=True)\nancova_table_type_2.reset_index(inplace=True)\nancova_table_type_2.rename(columns={'index': 'Effect'}, inplace=True)\n\nancova_table_type_3.rename(columns={'sum_sq': 'SSn', 'df': 'DFn', 'F': 'F', 'PR(>F)': 'p'}, inplace=True)\nancova_table_type_3.reset_index(inplace=True)\nancova_table_type_3.rename(columns={'index': 'Effect'}, inplace=True)\n\n# Calculate DFd (degrees of freedom for residuals)\ndfd_type1 = ancova_table_type_1.loc[ancova_table_type_1['Effect'] == 'Residual', 'DFn'].values[0]\ndfd_type2 = ancova_table_type_2.loc[ancova_table_type_2['Effect'] == 'Residual', 'DFn'].values[0]\ndfd_type3 = ancova_table_type_3.loc[ancova_table_type_3['Effect'] == 'Residual', 'DFn'].values[0]\nancova_table_type_1['DFd'] = dfd_type1\nancova_table_type_2['DFd'] = dfd_type2\nancova_table_type_3['DFd'] = dfd_type3\n\n# Filter out the Residual row\nancova_table_type_1 = ancova_table_type_1[ancova_table_type_1['Effect'] != 'Residual']\nancova_table_type_2 = ancova_table_type_2[ancova_table_type_2['Effect'] != 'Residual']\nancova_table_type_3 = ancova_table_type_3[ancova_table_type_3['Effect'] != 'Residual']\n\n# Select and reorder columns to match the R output\nancova_table_type_1 = ancova_table_type_1[['Effect', 'DFn', 'DFd', 'SSn', 'SSd', 'F', 'p', 'p<0.05', 'ges']]\nancova_table_type_2 = ancova_table_type_2[['Effect', 'DFn', 'DFd', 'SSn', 'SSd', 'F', 'p', 'p<0.05', 'ges']]\nancova_table_type_3 = ancova_table_type_3[['Effect', 'DFn', 'DFd', 'SSn', 'SSd', 'F', 'p', 'p<0.05', 'ges']]\n```\n:::\n\n\n## Type 1 Ancova in Python\n\n::: {#a61be36c .cell execution_count=6}\n``` {.python .cell-code}\nprint(tabulate(ancova_table_type_1, headers='keys', tablefmt='grid'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+----------+-------+-------+---------+---------+----------+-------------+----------+----------+\n|    | Effect   |   DFn |   DFd |     SSn |     SSd |        F |           p | p<0.05   |      ges |\n+====+==========+=======+=======+=========+=========+==========+=============+==========+==========+\n|  0 | C(drug)  |     2 |    26 | 293.6   | 417.203 |  9.14855 | 0.000981237 | True     | 0.413054 |\n+----+----------+-------+-------+---------+---------+----------+-------------+----------+----------+\n|  1 | pre      |     1 |    26 | 577.897 | 417.203 | 36.0145  | 2.45433e-06 | True     | 0.580743 |\n+----+----------+-------+-------+---------+---------+----------+-------------+----------+----------+\n```\n:::\n:::\n\n\n## Type 2 Ancova in Python\n\n::: {#41294edd .cell execution_count=7}\n``` {.python .cell-code}\nprint(tabulate(ancova_table_type_2, headers='keys', tablefmt='grid'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n|    | Effect   |   DFn |   DFd |      SSn |     SSd |        F |           p | p<0.05   |      ges |\n+====+==========+=======+=======+==========+=========+==========+=============+==========+==========+\n|  0 | C(drug)  |     2 |    26 |  68.5537 | 417.203 |  2.13613 | 0.138379    | False    | 0.141128 |\n+----+----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n|  1 | pre      |     1 |    26 | 577.897  | 417.203 | 36.0145  | 2.45433e-06 | True     | 0.580743 |\n+----+----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n```\n:::\n:::\n\n\n## Type 3 Ancova in Python\n\n::: {#054623a5 .cell execution_count=8}\n``` {.python .cell-code}\nprint(tabulate(ancova_table_type_3, headers='keys', tablefmt='grid'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+----+-----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n|    | Effect    |   DFn |   DFd |      SSn |     SSd |        F |           p | p<0.05   |      ges |\n+====+===========+=======+=======+==========+=========+==========+=============+==========+==========+\n|  0 | Intercept |     1 |    26 |  61.2592 | 417.203 |  3.81767 | 0.0615519   | False    | 0.128034 |\n+----+-----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n|  1 | C(drug)   |     2 |    26 |  68.5537 | 417.203 |  2.13613 | 0.138379    | False    | 0.141128 |\n+----+-----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n|  2 | pre       |     1 |    26 | 577.897  | 417.203 | 36.0145  | 2.45433e-06 | True     | 0.580743 |\n+----+-----------+-------+-------+----------+---------+----------+-------------+----------+----------+\n```\n:::\n:::\n\n\nPlease note that the results are consistent with the results achieved with [R](https://psiaims.github.io/CAMIS/R/ancova.html), except for the first row of the type 3 table featuring the intercept.\n\n",
    "supporting": [
      "ancova_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}