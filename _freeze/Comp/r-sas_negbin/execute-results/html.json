{
  "hash": "19cb8a7f8a56041037a34250f53e2e68",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R vs SAS: Negative Binomial Regression\"\nformat: html\ntoc: true\necho: true\neval: true\nkeep-hidden: true\n---\n\n\n\n# Summary\n\n## Goal\n\nComparison of implementations and results between SAS vs R for negative binomial regression for count data.\n\n## Scope\n\n::: columns\n::: {.column width=\"45%\"}\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n## Methodologies\n\n-   Negative binomial regression\\\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n## Technical implementations\n\n-   SAS: `PROC GENMOD` with option: `DIST = NB` or `DIST = NEGBIN`\n-   R: `MASS::glm.nb`\\\n:::\n:::\n:::\n\n## Findings\n\nBelow are summary of findings from a numerical comparison using dummy data, where possible we specify the same algorithm in R and SAS (see section [Numerical Comparisons](#sec-num-comp) for details).\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Negative binomial regression\n\nExact match (at 0.001 level) can be obtained using `glm.nb` in R vs `PROC GENMOD` procedure in SAS, for parameter and lsmeans estimates, confidence intervals and p-values after manually adjusting the estimated variance-covariance matrix in R. For the dispersion parameter the MLEs also match, however discrepancies in the confidence intervals are observed.\n:::\n\nIn the following sections the implementations will be compared in tabular fashion followed by a numerical comparison using dummy data.\n\n# Comparison of key features of SAS and R implementations\n\nThe following set of tables compare the two implementations and which options need to be adjusted in R to obtain matching results if necessary. The following aspects are compared:\n\n1.  Parameterization of the negative binomial distribution\n2.  Likelihood optimization algorithm\n3.  Estimation of the variance-covariance matrix\n4.  Convergence criteria\n5.  Confidence interval (CI) estimation method\n6.  Hypothesis tests for regression coefficients\n7.  Estimation of marginal means\n\n## How to read the tables:\n\nLet's walk through the conclusions for [Table 1](#tbl-1):\n\n-   SAS and R use different parameterizations of the negative binomial\n-   SAS and R use different likelihood optimization algorithms\n-   There are differences in the estimation of the variance-covariance matrix, in particular the covariance between dispersion/scale parameter and model coefficients. It is however possible to obtain the SAS variance-covariance matrix in R.\n-   Convergence criteria are not generally identical in SAS and R.\n-   CI estimation methods are by default not identical but by using alternative confint function in R SAS method can be reproduced\\\n-   Methods for hypothesis testing for model coefficients are equivalent in SAS and R.\n-   Least-square or marginal means are not directly available in R but equivalent estimation as in SAS is possible with additional packages\n\n|                  Attribute                   |                                                                                              SAS <br> `PROC GENMOD`                                                                                              |                                                                                                                        R <br>`MASS::glm.nb`                                                                                                                        | Note                                                                                                                                                                                                                                                                                                                                                    |\n|:---------------:|:-----------------:|:-----------------:|:----------------|\n|      Negative binomial parameterization      |                          Variance of the negative binomial is given by $\\mu + k\\mu^2$ and the dispersion parameter `k` is estimated. Overdispersion increases as `k` goes to infinity.                           |                                             Variance of the negative binomial is given by $\\mu + \\frac{\\mu^2}{\\theta}$ and the scale parameter `theta` is estimated. Overdispersion increases as `theta` goes to zero.                                             | $k=\\frac{1}{\\theta}$                                                                                                                                                                                                                                                                                                                                    |\n|      Likelihood optimization algorithm       |                                                                                    Ridge-stabilized Newton-Raphson algorithm                                                                                     |                                                                                                            Iteratively reweighted least squares (IWLS)                                                                                                             | It seems SAS performs simultaneous optimization on all parameters (i.e. including dispersion). R uses an alternating process, where glm coefficients are fitted given a fixed theta and then theta is estimated given fixed coefficients until convergence.                                                                                             |\n|   Estimation of variance-covariance matrix   |        Observed (rather than expected) fisher information is used for calculation of standard errors of coefficients, which allows for non-zero covariance between coefficients and dispersion parameter.        | Expected fisher information is used for calculation of standard errors of coefficients, so covariance between coefficients and dispersion parameter is zero (which is asymptotically correct). However identical vcov matrix as in SAS can be obtained \"post-hoc\". | As shown in the numerical example below in R the variance-covariance matrix corresponding to the `PROC GENMOD` estimation can be obtained based on the outputs from `MASS::glm.nb` with the `glm.nb.cov` function. The \"correct\" standard errors, confidence intervals and p-values can then be manually calculated based on the new covariance matrix. |\n|             Convergence criteria             | The iterations are considered to have converged when the maximum change in the parameter estimates between iteration steps is less than the value specified in `CONVERGE` option (default: `CONVERGENCE = 1E-4`) |                                                                 Based on relative difference between deviance, specified through `epsilon` argument in `glm.control` (default: `epsilon = 1e-8`).                                                                  | `PROC GENMOD` also checks for relative Hessian convergence and throws a warning if this is larger than the value provided in the `CONVH` option (default: `CONVH = 1E-4` ).                                                                                                                                                                             |\n|  Confidence interval (CI) estimation method  |                                                  By default asymptotic Wald CIs are estimated. Profile likelihood CI is estimated if option `LRCI` is provided.                                                  |                                                                            `confint` function will estimate profile likelihood CIs, Wald CIs can be obtained by using `confint.default`                                                                            | Note that by default confidence intervals can differ even if same method is used if vcov matrix in R is not adjusted as explained above.                                                                                                                                                                                                                |\n| Hypothesis tests for regression coefficients |                                                                                               Asymptotic Wald test                                                                                               |                                                                                                                        Asymptotic Wald test                                                                                                                        | `PROC GENMOD` reports Wald Chi-square statistic, while `MASS::glm.nb` reports the Z statistic, however the p-values are equivalent. Note that by default test results will differ if vcov matrix in R is not adjusted as explained above.                                                                                                               |\n|  Estimation of least-square/marginal means   |     Calculation through lsmeans statement assumes that for classification effects the groups are balanced. `OM` option can be provided to obtain lsmeans that are using the observed proportions in the data     |                                                                                       Not implemented as part of `MASS::glm.nb` but can be obtained using `emmeans` package.                                                                                       | In R marginal means can be obtained using the `emmeans::emmeans` function, setting argument `weights = \"equal\"` corresponds to the default option in SAS, while `weights = \"proportional\"` gives the means proportional to observed data                                                                                                                |\n\n: Negative binomial regression in SAS vs R {#tbl-1}\n\n# Numerical Comparison {#sec-num-comp}\n\n-   SAS `PROC GENMOD` procedure\n\n-   R `MASS::glm.nb`\n\nA dummy dataset is first generated, and negative binomial regression is applied to the dummy dataset for demonstration purposes. Every effort is made to ensure that the R code employs estimation methods/ optimization algorithms/ other components that closely match (as much as possible) those used in the SAS code. This is done to facilitate a comparison of estimates, 95% confidence intervals (CIs), and p-values between the two implementations.\n\n## Prerequisites: R packages\n\nIn order to run these analyses we need to load a few packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:MASS':\n\n    select\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(emmeans)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWelcome to emmeans.\nCaution: You lose important information if you filter this package's results.\nSee '? untidy'\n```\n\n\n:::\n:::\n\n\n\nWe also define the `glm_nb_cov` function to obtain the SAS variance-covariance matrix in R from [here](https://stats.stackexchange.com/questions/221648/negative-binomial-regression-in-r-allowing-for-correlation-between-dispersion).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Helper function to compute the variance from negative binomial regression\n## This matches with variance estimated from SAS\nglm_nb_cov <- function(mod) {\n  # given a model fitted by glm.nb in MASS, this function returns a variance covariance matrix for the\n  # regression coefficients and dispersion parameter, without assuming independence between these\n  # note that the model must have been fitted with x=TRUE argument so that design matrix is available\n  \n  # formulae based on p23-p24 of\n  # http://pointer.esalq.usp.br/departamentos/lce/arquivos/aulas/2011/LCE5868/OverdispersionBook.pdf\n  # and http://www.math.mcgill.ca/~dstephens/523/Papers/Lawless-1987-CJS.pdf\n  \n  # lintr: off\n  # please rm -- variable not used!\n  # k <- mod$theta\n  # lintr: on\n  # p is number of regression coefficients\n  p <- dim(vcov(mod))[1]\n  \n  # construct observed information matrix\n  obsInfo <- array(0, dim = c(p + 1, p + 1))\n  \n  # first calculate top left part for regression coefficients\n  for (i in 1:p) {\n    for (j in 1:p) {\n      obsInfo[i, j] <- sum((1 + mod$y / mod$theta) * mod$fitted.values * mod$x[, i] * mod$x[, j] /\n                             (1 + mod$fitted.values / mod$theta)^2)\n    }\n  }\n  \n  # information for dispersion parameter\n  obsInfo[(p + 1), (p + 1)] <- -sum(trigamma(mod$theta + mod$y) - trigamma(mod$theta) -\n                                      1 / (mod$fitted.values + mod$theta) + (mod$theta + mod$y) / (mod$theta + mod$fitted.values)^2 -\n                                      1 / (mod$fitted.values + mod$theta) + 1 / mod$theta)\n  \n  # covariance between regression coefficients and dispersion\n  for (i in 1:p) {\n    obsInfo[(p + 1), i] <- -sum(((mod$y - mod$fitted.values) * mod$fitted.values /\n                                   ((mod$theta + mod$fitted.values)^2)) * mod$x[, i])\n    obsInfo[i, (p + 1)] <- obsInfo[(p + 1), i]\n  }\n  \n  # return variance covariance matrix\n  solve(obsInfo, tol = 1e-20)\n}\n```\n:::\n\n\n\n## Dummy data\n\nA dummy dataset is simulated, including\n\n-   100 subjects;\n-   $grp$: a dummy variable with 1:1 subject assignment to treatment ($grp = 1$) vs placebo ($grp = 0$); note, variable $grpc$ is a character version of $grp$, which takes the value of \"Trt\" or \"Plb\".\n-   $x1$: a continuous variable which follows a normal distribution of mean of 0 and sd of 1;\n-   $x2$: a categorical variable which take the value of \"A\" or \"B\" or \"C\" with a probability of 0.3, 0.2, 0.5, respectively.\n-   $logtime$: An offset for the calculation of rates (e.g time in years) on the log-scale\n-   $y$: a negative binomial outcome giving the event counts;\n\nThe dummy dataset is saved as a csv file, and then the csv file is read into SAS.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN = 100\n\n# set seed for replication\nset.seed(123)\n\n# Treatment Group; 1:1 ratio\ngrp <- rep(c(0,1),each= N/2)\n\n# Covariates (one continuous; one categorical)\nx1 <- rnorm(N)\nx2 <- factor(sample(LETTERS[1:3], N, replace = TRUE, \n                    prob=c(0.3, 0.2, 0.5)))\n\n# Offset\nlogtime <- log(runif(N, 1, 2))\n\n# Model parameter assumption\nbeta0 = 0.6\nbetaTrt = -0.5\nbeta1 = 0.25\nbeta2 = c(-0.1, 0.2)\ntheta = 1/2\n\n\n# Dummy dataset\ndf <- data.frame(grp,x1, x2, logtime) %>% \n   mutate(log_rate = \n            case_when(x2 == \"A\" ~ beta0 + betaTrt*grp + beta1*x1 + logtime,\n                      x2 == \"B\" ~ beta0 + betaTrt*grp + beta1*x1 + beta2[1] + logtime, \n                      x2 == \"C\" ~ beta0 + betaTrt*grp + beta1*x1 + beta2[2] + logtime),\n          y = rnegbin(N, mu = exp(log_rate), theta = theta),\n          grpc = factor(case_when(grp==0 ~\"Plb\",\n                                 grp==1 ~\"Trt\")))\n\n# save the dummy dataset to be imported in SAS\n# write.csv(df, file = \"df_dummy_negbin.csv\")\n```\n:::\n\n\n\n## Negative binomial regression\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Conclusion for negative binomial regression\n\nExact match (at 0.001 level) can be obtained using `glm.nb` in R vs `PROC GENMOD` procedure in SAS, for parameters and lsmeans estimates, confidence intervals and p-values after manually adjusting the estimated variance-covariance matrix in R. For the dispersion parameter the MLEs also match, however discrepancies in the confidence intervals are observed.\n:::\n\n### Negative binomial regression in SAS\n\nAfter importing the dummy dataset we can run the negative binomial regression in SAS using \\`PROC GENMOD. We estimate the model parameters and lsmeans for the treatment arms using both the default and OM weights.\n\n\n\n::: {.cell}\n\n```{.sas .cell-code}\nproc genmod data=df;\n\tclass GRPC (ref='Plb') X2 (ref='A');\n\tmodel y = GRPC x1 x2 / dist=negbin link=log offset=logtime;\n\tlsmeans GRPC /cl;\n\tlsmeans GRPC /cl OM;\nrun;\n```\n:::\n\n\n\nBelow is a screenshot of output tables summarizing coefficient estimates and lsmeans.\n\n![](../images/negbin/sas_negbin_estimates.jpg){fig-align=\"left\"}\n\n## Negative binomial regression in R\n\nLets now try to reproduce the results in R using `MASS::glm.nb`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- glm.nb(y ~ grpc + x1 + x2 + offset(logtime), data = df, x = TRUE)\n\n# model coefficients summary\nsummary(fit)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               Estimate Std. Error    z value   Pr(>|z|)\n(Intercept)  0.72652157  0.3507054  2.0716007 0.03830269\ngrpcTrt     -0.61401736  0.3414815 -1.7980982 0.07216145\nx1           0.25663164  0.1890455  1.3575129 0.17461831\nx2B         -0.37406342  0.5069487 -0.7378723 0.46059203\nx2C         -0.04999267  0.3916689 -0.1276401 0.89843376\n```\n\n\n:::\n:::\n\n\n\nWe can see that while the estimates are exactly matching those in SAS, the standard errors are slightly smaller. This is a result of the difference in covariance estimation mentioned above. To obtain exactly the same results as in SAS we need to re-estimate the covariance matrix using the `glm_nb_cov` function we defined earlier. Note that to use this function with the fitted results we needed to specify `x = TRUE` in the `glm.nb` function so that the design matrix is available.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma_hat <- glm_nb_cov(fit)\n\n## recalculate confidence intervals, and p-values\ncoef_est <- coef(fit)\ncoef_se <- sqrt(diag(sigma_hat)[1:5])\ncoef_lower <- coef_est - qnorm(0.975) * coef_se\ncoef_upper <- coef_est + qnorm(0.975) * coef_se\nzstat <- coef_est/coef_se\npval <- 2 * (1-pnorm(abs(zstat)))\nnew_summary <- cbind(coef_est, coef_se, coef_lower, coef_upper, zstat, pval)\ncolnames(new_summary) <- c(\"Estimate\", \"Std. Error\", \"CI_lower\", \"CI_upper\", \"z value\", \"Pr(>|z|)\")\nrownames(new_summary) <- rownames(summary(fit)$coefficients)\nnew_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               Estimate Std. Error    CI_lower   CI_upper    z value   Pr(>|z|)\n(Intercept)  0.72652157  0.3517882  0.03702942 1.41601371  2.0652246 0.03890176\ngrpcTrt     -0.61401736  0.3479606 -1.29600763 0.06797291 -1.7646174 0.07762809\nx1           0.25663164  0.2066499 -0.14839474 0.66165803  1.2418667 0.21428575\nx2B         -0.37406342  0.5073695 -1.36848936 0.62036253 -0.7372604 0.46096404\nx2C         -0.04999267  0.4013463 -0.83661692 0.73663158 -0.1245624 0.90086997\n```\n\n\n:::\n:::\n\n\n\nNow the estimates, standard errors, 95% confidence interval limits and p-values are exactly matching those in SAS up to the 4th digit. We can also provide an estimate and CI for the dispersion parameter:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# estimate and 95%-CI for k = 1/theta\ntheta_est <- fit$theta\ntheta_se <- sqrt(sigma_hat[6, 6])\ntheta_est_ci <- c(theta_est, theta_est - qnorm(0.975) * theta_se, theta_est + qnorm(0.975) * theta_se)\n1/theta_est_ci[c(1, 3, 2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.370525 1.672211 4.070264\n```\n\n\n:::\n:::\n\n\n\nWe see that while the point estimate is the same as in SAS, the CI for the dispersion does not match, most likely due to the different parameterizations used by SAS and R.\n\nFinally we can replicate the estimation of lsmeans in SAS via the emmeans package. Note that we need to supply the re-estimated covariance matrix, but only provide the rows and columns for the model coefficients without the dispersion parameter as emmeans does not need the latter.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lsmeans with weights = equal, equivalent to SAS default\nlsmean1 <- emmeans(fit, ~ grpc, data=df, vcov. = sigma_hat[1:5, 1:5], weights = \"equal\", offset = 0)\nlsmean1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n grpc   emmean    SE  df asymp.LCL asymp.UCL\n Plb   0.60837 0.245 Inf     0.128     1.088\n Trt  -0.00565 0.268 Inf    -0.531     0.519\n\nResults are averaged over the levels of: x2 \nResults are given on the log (not the response) scale. \nConfidence level used: 0.95 \n```\n\n\n:::\n\n```{.r .cell-code}\n# lsmeans with weights = proportional, equivalent to SAS OM option\nlsmean2 <- emmeans(fit, ~ grpc, data=df, vcov. = sigma_hat[1:5, 1:5], weights = \"proportional\", offset = 0)\nlsmean2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n grpc emmean    SE  df asymp.LCL asymp.UCL\n Plb  0.6527 0.237 Inf     0.188     1.117\n Trt  0.0386 0.250 Inf    -0.451     0.528\n\nResults are averaged over the levels of: x2 \nResults are given on the log (not the response) scale. \nConfidence level used: 0.95 \n```\n\n\n:::\n:::\n\n\n\nEstimates and CIs are exactly matching those in SAS for both of the options. Finally we can also obtain the z statistic and corresponding p-values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest(lsmean1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n grpc   emmean    SE  df z.ratio p.value\n Plb   0.60837 0.245 Inf   2.484  0.0130\n Trt  -0.00565 0.268 Inf  -0.021  0.9832\n\nResults are averaged over the levels of: x2 \nResults are given on the log (not the response) scale. \n```\n\n\n:::\n\n```{.r .cell-code}\ntest(lsmean2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n grpc emmean    SE  df z.ratio p.value\n Plb  0.6527 0.237 Inf   2.753  0.0059\n Trt  0.0386 0.250 Inf   0.155  0.8770\n\nResults are averaged over the levels of: x2 \nResults are given on the log (not the response) scale. \n```\n\n\n:::\n:::\n\n\n\nAnd we see that these are also identical to the SAS results.\n\n## Discussion\n\nAs shown above it is generally possible to obtain exactly matching results in SAS and R for negative binomial regression. Most important to ensure matching is the manual estimation of the covariance matrix in R, as otherwise standard errors will only asymptotically match those in SAS.\n\nAs shown above lsmeans-type estimates can also be exactly reproduced using the emmeans package in R if options are correctly specified.\n\nFor the dispersion parameter an exact match in the MLE is possible, however CIs were not matching in our example. Most likely this is due to the different parameterizations used in SAS and R, since the variance for the dispersion parameters can not be transformed exactly between the two parameterizations. As generally the dispersion parameter should be of lesser interest and the other parameter estimates are not affected by this, this may however not be an issue in most applications.\n\nEven though results matched in the numerical example we have also highlighted that there are differences in the implementations, in particular when it comes to maximum likelihood optimization methods and convergence criteria. It is possible that this may lead to different estimates for data where the MLE is not easy to find and the methods may disagree on convergence or the optima of the likelihood. In addition, the different parameterizations may lead to different results in scenarios, where there is only very little overdispersion, since in those cases the dispersion parameter will go towards zero in SAS and towards infinity in R.\n\nAs a final point it should be kept in mind when comparing SAS and R results, that the two apply different rules for rounding. R rounds to the even digit (i.e. both 1.5 and 2.5 round to 2), while SAS uses \"conventional\" rounding rules (i.e 1.5 is rounded to 2 and 2.5 to 3). This can also occasionally lead to differences in results and may need to be addressed by using a custom rounding function in R, that uses SAS rounding rules. An example of such a function is provided in one of the references given below.\n\n## References\n\n-   [SAS PROC GENMOD documentation](https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.3/statug/statug_genmod_toc.htm).\n-   [R glm.nb documentation](https://www.rdocumentation.org/packages/MASS/versions/7.3-60.0.1/topics/glm.nb).\n-   [CrossValidated discussion on covariance estimation](https://stats.stackexchange.com/questions/221648/negative-binomial-regression-in-r-allowing-for-correlation-between-dispersion) (`glm.nb.cov` function is provided in the answer by Jonathan Bartlett).\n-   [Discussion of general differences in SAS and R including rounding](https://www.lexjansen.com/phuse-us/2020/ct/CT05.pdf)\n",
    "supporting": [
      "r-sas_negbin_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}