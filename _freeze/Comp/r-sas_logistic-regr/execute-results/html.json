{
  "hash": "cb8caeed673183df9faf3f12950e8ae9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R vs SAS: Logistic Regression\"\ntoc: true\necho: true\neval: true\nkeep-hidden: true\n---\n\n\n\n# Summary\n\n## Goal\n\nComparison of results between SAS vs R for different applications of logistic regression; where possible we try to ensure the same statistical method or algorithm is specified. However, there are some underlying differences between the algorithms in SAS vs R that cannot be (at least not easily) \"tweaked\". The document also provides some remarks on what parameters to look out for and what could have caused the numerical differences.\n\n## Scope\n\n::: columns\n::: {.column width=\"45%\"}\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n## Methodologies\n\n-   Logistic regression\n-   Firth's bias-reduced logistic regression\n-   g-computation / standardization with covariate adjustment\n:::\n:::\n\n::: {.column width=\"55%\"}\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n## Technical implementations\n\n-   SAS: `PROC LOGISTIC` (with and without firth option) and `%margins` macro\\\n-   R: `stats::glm`, `logistf::logistf` and `beeca::get_marginal_effect`\n:::\n:::\n:::\n\n## Findings\n\nBelow are summary of findings from a numerical comparison using example data, where possible we specify the same algorithm in R and SAS.\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Logistic regression\n\nMaximum Likelihood Estimates and p-values for the Model Parameters have an exact match (at 0.001 level) using `glm` in R vs `PROC LOGISTIC` procedure (without Firth option) in SAS.\n\nWhen using GLM parameterization (see [SAS page](https://psiaims.github.io/CAMIS/SAS/logistic-regr.html) for explanation of SAS parameterization types), the parameters estimates (and 95% CIs) can be exponentiated to provide odds ratios and 95% CIs for odds ratios.\n\nAs default for categorical variables, R uses the first category as reference see [R page](https://psiaims.github.io/CAMIS/R/logistic-regr.html), and SAS uses the last category as reference group. Check your design matrix in SAS, and `contr.` options in R to ensure interpretation of estimates from the model is correct, then results align.\n\nAn exact match (at 0.001 level) is obtained for the Odds ratios and CIs when the same method and same parameterization is used, however SAS Proc Logistic can only calculate Wald CI's. Profile likelihood CIs are not available.\n\nR using glm() function, can use the confint() function to calculate CI's using the profile likelihood method or the confint.default() function to calculate CIs using the Wald method.\n:::\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Firth logistic regression\n\nExact match cannot be obtained for all estimates using `logistf` vs `PROC LOGISTIC` procedure (with Firth option). More specifically:\\\n- Coefficient estimate and 95% CI matched at 0.001 level;\\\n- Standard error are not the same (e.g., 0.02023 for age in R vs 0.02065 in SAS);\\\n- p-value is not the same (0.6288 in R for age vs 0.6348 in SAS);\\\n:::\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### g-computation with covariate adjustment\n\nExact match (at 0.001 level) can be obtained using `get_marginal_effect` in R vs `%margins` macro in SAS.\n:::\n\nIn the following sections, the parameterisation of logistic regression implementation (with an without Firth option) will be compared followed by numerical comparison using example data.\n\n# Prerequisites\n\n## R packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(survival) # for example data\nlibrary(logistf) # for firth regression\nlibrary(beeca) # for covariate adjustment\n```\n:::\n\n\n\n## Data\n\n### Logistic regressions\n\nWe use the `lung` dataset provided with {survival} R package. Initial data preparation involves generating a new binary outcome based on the weight change.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the lung dataset is available in ./data/lung_cancer.csv\nlung2 <- survival::lung %>% \n  mutate(\n    wt_grp = factor(wt.loss > 0, labels = c(\"weight loss\", \"weight gain\"))\n  ) \nglimpse(lung2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 228\nColumns: 11\n$ inst      <dbl> 3, 3, 3, 5, 1, 12, 7, 11, 1, 7, 6, 16, 11, 21, 12, 1, 22, 16…\n$ time      <dbl> 306, 455, 1010, 210, 883, 1022, 310, 361, 218, 166, 170, 654…\n$ status    <dbl> 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ age       <dbl> 74, 68, 56, 57, 60, 74, 68, 71, 53, 61, 57, 68, 68, 60, 57, …\n$ sex       <dbl> 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, …\n$ ph.ecog   <dbl> 1, 0, 0, 1, 0, 1, 2, 2, 1, 2, 1, 2, 1, NA, 1, 1, 1, 2, 2, 1,…\n$ ph.karno  <dbl> 90, 90, 90, 90, 100, 50, 70, 60, 70, 70, 80, 70, 90, 60, 80,…\n$ pat.karno <dbl> 100, 90, 90, 60, 90, 80, 60, 80, 80, 70, 80, 70, 90, 70, 70,…\n$ meal.cal  <dbl> 1175, 1225, NA, 1150, NA, 513, 384, 538, 825, 271, 1025, NA,…\n$ wt.loss   <dbl> NA, 15, 15, 11, 0, 0, 10, 1, 16, 34, 27, 23, 5, 32, 60, 15, …\n$ wt_grp    <fct> NA, weight gain, weight gain, weight gain, weight loss, weig…\n```\n\n\n:::\n:::\n\n\n\n### g-computation\n\nWe use the `trial01` dataset provided with {beeca} R package. Initial data preparation involves setting the treatment indicator as a categorical variable and removing any incomplete cases.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"trial01\")\n\ntrial01$trtp <- factor(trial01$trtp) ## set treatment to a factor\n\ntrial01 <- trial01 %>% filter(!is.na(aval)) ## remove missing data i.e complete cases analysis\n# save the dataset to be imported in SAS\n# write.csv(trial01, file = \"data/trial01.csv\", na = \".\")\n```\n:::\n\n\n\n# Logistic Regression\n\n## Parameterisation Comparison\n\nThe following set of tables compare how to configure particular parameters / attributes of the methodologies.\n\n|                  Attribute                   | SAS <br> `PROC LOGISTIC` | R <br>`stats::glm`  | Description                                                                                                    | Note                                                                                                                                                                     |\n|:-------------:|:-------------:|:-------------:|:--------------|:--------------|\n|      Likelihood optimization algorithm       |         Default          |       Default       | Fisher's scoring method (i.e., iteratively reweighted least squares (IRLS))                                    | For logistic regression, parameter estimates and covariance matrices estimated should be the same for both Fisher's and Newton-Raphson algorithm for maximum likelihood. |\n|             Convergence criteria             |         Default          |         NA          | Specifies relative gradient convergence criterion (GCONV=1E--8)                                                | In`PROC LOGISTIC` there are three other convergence criteria which can be specified. However, there is no exact criterion that matches the criteria in `stats::glm`.     |\n|             Convergence criteria             |            NA            |       Default       | Specifies relative difference between deviance \\< 1E--8.                                                       |                                                                                                                                                                          |\n|  Confidence interval (CI) estimation method  |         Default          | `confint.default()` | Wald CI                                                                                                        | In `stats::glm` in R, function confint.default() gives the Wald confidence limits; whereas function confint() gives the profile-likelihood limits.                       |\n| Hypothesis tests for regression coefficients |         Default          |       Default       | Wald tests, which are based on estimates for the regression coefficients and its corresponding standard error. |                                                                                                                                                                          |\n\n: Standard Logistic Regression in SAS vs R {#tbl-1}\n\n## Numerical Comparison {#sec-num-comp}\n\nEvery effort is made to ensure that the R code employs estimation methods/ optimization algorithms/ other components that closely match (as much as possible) those used in the SAS code.\n\n### `glm` in R\n\nNote, the default fitting method in `glm` is consistent with the default fitting method in `PROC LOGISTIC` procedure.\n\n-   Default fitting method in `glm` is iteratively reweighted least squares, and the documentation can be found [here](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/glm).\n-   Default fitting method for `PROC LOGISTIC` procedure is Fisher's scoring method, which is reported as part of the SAS default output, and it is equivalent to \"Iteratively reweighted least squares\" method as reported in this [documentation](https://support.sas.com/documentation/cdl/en/statug/63347/HTML/default/viewer.htm#statug_logistic_sect033.htm).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# stats::glm function\nm1 <- glm(wt_grp ~ age + sex + ph.ecog + meal.cal, data = lung2, family = binomial(link=\"logit\"))\n# model coefficients summary\nsummary(m1)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 Estimate   Std. Error    z value   Pr(>|z|)\n(Intercept)  3.2631672833 1.6488206996  1.9790917 0.04780569\nage         -0.0101717451 0.0208107243 -0.4887742 0.62500157\nsex         -0.8717357187 0.3714041991 -2.3471348 0.01891841\nph.ecog      0.4179665342 0.2588653214  1.6146100 0.10639518\nmeal.cal    -0.0008869427 0.0004467405 -1.9853642 0.04710397\n```\n\n\n:::\n:::\n\n\n\nNote, function `confint.default` gives the Wald confidence limits, which is the default option in SAS `PROC LOGISTIC` procedure; whereas `confint` gives the profile-likelihood limits. Conditional odds ratio is calculated by taking the exponential of the model parameters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbind(est = coef(m1), \n          confint.default(m1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      est        2.5 %        97.5 %\n(Intercept)  3.2631672833  0.031538095  6.494796e+00\nage         -0.0101717451 -0.050960015  3.061653e-02\nsex         -0.8717357187 -1.599674572 -1.437969e-01\nph.ecog      0.4179665342 -0.089400173  9.253332e-01\nmeal.cal    -0.0008869427 -0.001762538 -1.134731e-05\n```\n\n\n:::\n:::\n\n\n\n### `PROC LOGISTIC` in SAS (without firth option)\n\n\n\n::: {.cell}\n\n```{.sas .cell-code}\nPROC LOGISTIC DATA=LUNG2; # import lung\n\tMODEL WT_GRP(EVENT=\"weight_gain\") = AGE SEX PH_ECOG MEAL_CAL;\n\tods output ESTIMATEs=estimates;\nrun;\n```\n:::\n\n\n\nBelow is screenshot of output tables summarizing coefficient estimates and confidence intervals\n\n![](../images/logistic_regression/sas_logistic_estimates.png){fig-align=\"left\"}\n\n![](../images/logistic_regression/sas_logistic_ci.png){fig-align=\"left\"}\n\n### Comment on model selection\n\nAs indicated in [Logistic regression in R](https://psiaims.github.io/CAMIS/R/logistic_regr.html) and [Logistic regression in SAS](https://psiaims.github.io/CAMIS/SAS/logistic-regr.html), the chi-Sq test statistics and p-values are different when performing model selections in R vs. SAS. The reason for this discrepancy is that the chi-Sq statistics from `anova()` in R is based on deviance test using residual deviance while the chi-Sq statistics from `PROC LOGISTIC` w/ `SELECTION` option in SAS is based on Wald test using z-values squared.\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Conclusion for logistic regression\n\nExact match (at 0.001 level) can be obtained using `glm` in R vs `PROC LOGISTIC` procedure (without Firth option) in SAS, for coefficient estimates, 95% CI, and for p-value.\n:::\n\n# Firth logistic regression\n\nThe following set of tables compare how to configure particular parameters / attributes of the methodologies.\n\n## Parameterisation Comparison\n\n|                  Attribute                   | SAS <br> `PROC LOGISTIC` w/ Firth option | R <br>`logistf::logistf`                                         | Description                                                                                                                                                                                                                                                                           | Note|\n|:-------------:|:--------------|:--------------|:--------------|:--------------|\n|      Likelihood optimization algorithm       | Default                                  | `control =`<br>`logistf.control` <br>`(fit =“IRLS”)`             | Fisher's scoring method (i.e., iteratively reweighted least squares (IRLS))                                                                                                                                                                                                           |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n|      Likelihood optimization algorithm       | `TECHNIQUE = NEWTON`                     | Default                                                          | Newton-Raphson algorithm                                                                                                                                                                                                                                                              ||\n|             Convergence criteria             | Default                                  | NA                                                               | Specifies relative gradient convergence criterion (GCONV=1E--8).                                                                                                                                                                                                                      | In`PROC LOGISTIC` there are three other convergence criteria which can be specified. If more than one convergence criterion is specified, the optimization is terminated as soon as one of the criteria is satisfied.                                                                                                                                                                                                                                                                                                                      |\n|             Convergence criteria             | NA                                       | Default                                                          | Specifies three criteria that need to be met: the change in log likelihood is less than lconv (default is 1E-5), the maximum absolute element of the score vector is less than gconv (default is 1E-5), and the maximum absolute change in beta is less than xconv (default is 1E-5). | The gconv criteria in `logistif` is different from `GCONV` in SAS. The lconv criteria is also not exactly the same as the `ABSFCONV` or `FCONV` in `PROC LOGISTIC` in SAS, although the criteria use log likelihood. However, the `xconv` in R and `XCONV` in SAS seems to be consistent.                                                                                                                                                                                                                                                  |\n|             Convergence criteria             | `XCONV = 1E–8`                           | `control = logistf.control( xconv = 1E–8, lconv = 1, gconv = 1)` | Specifies the maximum absolute change in beta \\< 1E--8.                                                                                                                                                                                                                               | In `logistf`, three convergence criteria are checked at the same time. So here we use a large convergence criteria value for `lconv` and `gconv` to mimic the scenario where only `xconv` is checked.                                                                                                                                                                                                                                                                                                                                      |\n|  Confidence interval (CI) estimation method  | Default                                  | `pl= FALSE`                                                      | Wald CI                                                                                                                                                                                                                                                                               | For `logistf`: \"Note that from version 1.24.1 on, the variance-covariance matrix is based on the second derivative of the likelihood of the augmented data rather than the original data, which proved to be a better approximation if the user chooses to set a higher value for the penalty strength.\" This could cause differences in standard error estimates in R vs SAS for Firth logistic regression, and consequently results in differences in the corresponding Wald CI estimates and hypothesis tests results (e.g., p-values). |\n|  Confidence interval (CI) estimation method  | `CLPARM = PL` <br> `CLODDS = PL`         | Default                                                          | Profile likelihood-based CI                                                                                                                                                                                                                                                           | For Firth's bias-reduced logistic regression, it makes more sense to use penalized likelihood-based CI so it is consistent with the parameter estimation method which uses penalized maximum likelihood.                                                                                                                                                                                                                                                                                                                                   |\n| Hypothesis tests for regression coefficients | Default                                  | pl= FALSE                                                        | Wald tests, which are based on estimates for the regression coefficients and its corresponding standard error.                                                                                                                                                                        ||\n| Hypothesis tests for regression coefficients | NA                                       | Default                                                          | \"Likelihood ratio tests\", which are based on profile penalized log likelihood.                                                                                                                                                                                                        | In SAS, when the model statement option `CLPARM = PL` is specified, the CI will be calculated based on profile likelihood. However, the hypothesis testing method is still a Wald method. This could cause results mismatch in the p-value.                                                                                                                                                                                                                                                                                                |\n\n: Firth's Bias-Reduced Logistic Regression in SAS vs R {#tbl-2}\n\n## Numerical Comparison\n\nNote that while Firth logistic regression is not required for our example dataset nonetheless we use it for demonstration purposes only.\n\n### `logistf` in R\n\n-   By default, the [convergence criteria in `logistf`](https://cran.r-project.org/web/packages/logistf/logistf.pdf) specifies that three criteria need to be met at the same time, i.e., the change in log likelihood is less than lconv (default is 1E-5), the maximum absolute element of the score vector is less than gconv (default is 1E-5), and the maximum absolute change in beta is less than xconv (default is 1E-5). In SAS, the [default convergence criteria in `PROC LOGISTIC`](https://support.sas.com/documentation/cdl/en/statug/63962/HTML/default/viewer.htm#statug_logistic_sect034.htm) specifies relative gradient convergence criterion (GCONV=1E--8); while SAS also support three other convergence criteria but when there are more than one convergence criterion specified, the optimization is terminated as soon as one of the criteria is satisfied. By looking at the R pacakge/SAS documentation, the `gconv` criteria in `logistif` function is different from the `GCONV` in SAS. The `lconv` criteria is also not exactly the same as the `ABSFCONV` or `FCONV` in PROC LOGISTIC in SAS, although the criteria use log likelihood. However, similar convergence criteria might be obtained by using the maximum absolute change in parameter estimates (i.e., `xconv` in R and SAS). Therefore, for comparison with the SAS output, in `logistf` function, we use a large convergence criteria value for `lconv` and `gconv` to mimic the scenario where only `xconv` is checked, i.e., specify `logistf.control(xconv = 0.00000001, gconv = 1, lconv = 1)` for the `control` argument.\n\n-   By default, `logistf` function in R computes the confidence interval estimates and hypothesis tests (including p-value) for each parameter based on profile likelihood, which is also reported in the output below. However, Wald method (confidence interval and tests) can be specified by specifying the `control` argument with [`pl = FALSE`](https://cran.r-project.org/web/packages/logistf/logistf.pdf).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirth_mod <- logistf(wt_grp ~ age + sex + ph.ecog + meal.cal,\n                     data=lung2, \n                     control = logistf.control(fit =\"IRLS\", \n                                               xconv = 0.00000001, \n                                               gconv = 1, \n                                               lconv = 1))\nsummary(firth_mod)$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlogistf(formula = wt_grp ~ age + sex + ph.ecog + meal.cal, data = lung2, \n    control = logistf.control(fit = \"IRLS\", xconv = 1e-08, gconv = 1, \n        lconv = 1))\n\nModel fitted by Penalized ML\nCoefficients:\n                     coef     se(coef)   lower 0.95    upper 0.95     Chisq\n(Intercept)  3.1532937589 1.6031659729  0.051844703  6.410119e+00 3.9726447\nage         -0.0098111679 0.0202315630 -0.050518148  2.974343e-02 0.2337368\nsex         -0.8455619163 0.3632129422 -1.571158740 -1.356810e-01 5.4536777\nph.ecog      0.4018229715 0.2520090355 -0.090278518  9.093255e-01 2.5553004\nmeal.cal    -0.0008495327 0.0004288525 -0.001722033 -7.098976e-06 3.9058205\n                     p method\n(Intercept) 0.04624509      2\nage         0.62876680      2\nsex         0.01952718      2\nph.ecog     0.10992492      2\nmeal.cal    0.04811912      2\n\nMethod: 1-Wald, 2-Profile penalized log-likelihood, 3-None\n\nLikelihood ratio test=10.54964 on 4 df, p=0.03212009, n=170\nWald test = 33.85701 on 4 df, p = 7.972359e-07\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  (Intercept)           age           sex       ph.ecog      meal.cal \n 3.1532937589 -0.0098111679 -0.8455619163  0.4018229715 -0.0008495327 \n```\n\n\n:::\n\n```{.r .cell-code}\n## Code below would give Wald CI and tests results by adding `pl = FALSE`\n# logistf(..., pl = FALSE)\n```\n:::\n\n\n\nNote, function `confint` gives the profile-likelihood limits. Given the parameters from Firth's bias-reduced logistic regression is estimated using penalized maximum likelihood, `confint` function is used. Conditional odds ratio is calculated by taking the exponential of the model parameters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbind(est = coef(firth_mod), \n          confint(firth_mod))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      est    Lower 95%     Upper 95%\n(Intercept)  3.1532937589  0.051844703  6.410119e+00\nage         -0.0098111679 -0.050518148  2.974343e-02\nsex         -0.8455619163 -1.571158740 -1.356810e-01\nph.ecog      0.4018229715 -0.090278518  9.093255e-01\nmeal.cal    -0.0008495327 -0.001722033 -7.098976e-06\n```\n\n\n:::\n:::\n\n\n\n### `PROC LOGISTIC` in SAS (with firth option)\n\n-   Note, by default, SAS computes confidence interval based on Wald tests. Given the parameters from Firth's method is estimated using penalized maximum likelihood, below specifies CLODDS = PL CLPARM=PL (based on profile likelihood), which is consistent with the maximization method and the R code above. However, the [default hypothesis test for the regression coefficients](https://go.documentation.sas.com/doc/en/pgmsascdc/9.4_3.4/statug/statug_logistic_details50.htm) is still a Wald test, and the Chi-square statistics is calculated based on coefficient estimate and its corresponding standard error.\n\n-   `XCONV` specifies relative parameter convergence criterion, which should correspond to the `xconv` in `logistf` function in R. We specify `XCONV = 0.00000001` so it should be consistent with the R code above.\n\n\n\n::: {.cell}\n\n```{.sas .cell-code}\nPROC LOGISTIC DATA=LUNG2;\n\tMODEL WT_GRP(EVENT=\"weight gain\") = AGE SEX PH_ECOG MEAL_CAL / firth clodds=PL clparm=PL xconv = 0.00000001;\n\tods output ESTIMATEs=estimates;\nrun;\n```\n:::\n\n\n\nBelow is screenshot of output tables summarizing coefficient estimates and it's 95% CI\n\n![](../images/logistic_regression/sas_logistic_firth_estimates.png){fig-align=\"left\"}\n\n![](../images/logistic_regression/sas_logistic_firth_ci.png){fig-align=\"left\"}\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Conclusion for Firth logistic regression\n\nExact match cannot be obtained for all estimates using `logistf` vs `PROC LOGISTIC` procedure with Firth option. More specifically:\\\n- Coefficient estimate and its 95% CI matched at 0.001 level;\\\n- Standard error are not the same (e.g., 0.02023 for age in R vs 0.02065 in SAS);\\\n- p-value is not the same (0.6288 in R for age vs 0.6348 in SAS);\\\n:::\n\n# g-computation with covariate adjustment\n\nWe compare two implementions of g-computation in SAS:\n\n1.  The \"Predictive margins and average marginal effects\" [%margins](https://support.sas.com/kb/63/038.html#pur) macro. The %margins macro uses \"the delta method \\[...\\] to determine the standard errors for predictive margins and marginal effects\". Note that the %margins macro uses the `PROC GENMOD` procedure to implement the working logistic regression model and require another macro [%NLEST](https://support.sas.com/kb/58/775.html) to calculate contrasts that requires delta methodl such as risk ratio or odds ratio.\n2.  The SAS code provided in the appendix of the [Ge et al. (2011)](https://journals.sagepub.com/doi/10.1177/009286151104500409) implements the method outlined in the associated paper and simulations. Note: the Ge et al. (2011) macro uses the `PROC LOGISTIC` procedure to implement the working logistic regression model. `PROC IML` is used to calculate the delta method to determine the standard errors.\n\n## Numerical Comparison\n\n### `get_marginal_effect` in R\n\nWe fit a logistic regression model with covariate adjustment to estimate the marginal treatment effect using the delta method for variance estimation: as outlined in Ge et al (2011).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## fit the model including model based variance estimation with delta method\nfit1 <-\n  glm(aval ~ trtp + bl_cov, family = \"binomial\", data = trial01) %>% \n  get_marginal_effect(\n    trt = \"trtp\",\n    method = \"Ge\",\n    contrast = \"diff\",\n    reference = \"0\",\n    type = \"model-based\"\n  )\ncat(\"Marginal treatment effect = \", fit1$marginal_est, \"\\n\",\n    \"Standard error = \", fit1$marginal_se, \"\\n\"\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarginal treatment effect =  -0.06836399 \n Standard error =  0.06071641 \n```\n\n\n:::\n:::\n\n\n\n### `%Margins` macro in SAS\n\nWe now use the SAS \\[`%Margins`\\] (https://support.sas.com/kb/63/038.html) macro to perform the Ge et al. (2011) method on `trial01` to estimate the marginal risk difference and it's standard error.\n\n\n\n::: {.cell}\n\n```{.sas .cell-code}\n%Margins(data      = myWork.trial01,\n         class     = trtp,\n         classgref = first, /*Set reference to first level*/\n         response  = avaln,\n         roptions  = event='1', /*Ensure event is set to 1 = Yes */\n         dist      = binomial,  \n         model     = trtp bl_cov,\n         margins   = trtp, \n         options   = cl diff reverse, /*Specify risk difference contrast and \n                                      direction of treatment effect is correct*/\n         link      = logit);  /*Specify logit link function */\n\t\n** Store output data sets ; \ndata myWork.margins_trt_estimates;\n  set work._MARGINS;\nrun;\n         \ndata myWork.margins_trt_diffs;\n  set work._DIFFSPM;\nrun;\n```\n:::\n\n\n\n![](../images/logistic_regression/sas_logistic_gcomp_margins.png){fig-align=\"left\"}\n\n### `%LR` macro in SAS (Ge et al, 2011)\n\n\n\n::: {.cell}\n\n```{.sas .cell-code}\n%LR(data = myWork.trial01, /* input data set */\n\tvar1 = bl_cov, /* continuous covariates in the logistic regression */\n\tvar2 = trtp, /* categorical covariates in the logistic regression */\n\tp1 = 1, /* number of continuous covariates in the logistic regression */\n\tp2 = 1, /* number of categorical covariates in the logistic regression */\n\tresp = avaln, /* binary response variable in the logistic regression */\n\tntrt = 1); /* position of the treatment variable in the categorical covariates */\n\t\ndata myWork.ge_macro_trt_diffs;\n  set work.geout;\nrun;\n```\n:::\n\n\n\n![](../images/logistic_regression/sas_logistic_gcomp_ge.png){fig-align=\"left\"}\n\n::: {.callout-note appearance=\"minimal\" collapse=\"false\"}\n### Conclusion for g-computation with covariate adjustment\n\nExact match at the 0.001 level.\n:::\n\n# Final remarks\n\nIn summary, there are a few things to be aware of when comparing logistic regression results in R vs SAS. It is crucial to carefully manage the input parameters for each model to ensure they are configured similarly for logistic regression analyses. As highlighted also in [Logistic Regression in SAS](https://psiaims.github.io/CAMIS/SAS/logistic-regr.html), the variable parameterization is also important for modelling and interpretation, ensuring the types of variable (continuous vs. categorical) and reference values of categorical variable are applied as expected.\n\n1.  **Likelihood optimization method**\n\n-   The default likelihood optimization method in `glm` and `PROC LOGISTIC` is the same (i.e., Fisher's scoring method or iteratively reweighted least squares (IRLS)).\n\n-   However, the default optimization method in `logistf` is Newton-Raphson, which can be modified into IRLS via `control = logistf.control(fit = “IRLS”)`. Alternatively, one could specify `technique = newton` in the model statement in SAS to modify the likelihood optimization method.\n\n2.  **Convergence criteria**\n\n-   Although both SAS and R allows options to modify the convergence criteria, the criteria does not seem to be exactly the same, which could cause results mismatch in some scenarios.\n\n-   The [default convergence criteria in `PROC LOGISTIC`](https://support.sas.com/documentation/cdl/en/statug/63962/HTML/default/viewer.htm#statug_logistic_sect034.htm) specifies the relative gradient convergence criterion; where the [default convergence criteria in `glm`](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/glm.control.html) specifies relative difference between deviance.\n\n-   The default setting in logistf have checked more than one convergence criterion in its algorithm (i.e., [change in log likelihood, derivative of the log likelihood and parameter estimates](https://cran.r-project.org/web/packages/logistf/logistf.pdf)). One could specify a very large value for two of the criteria in order to mimic the scenario where only one criterion is checked (e.g., `control = logistf.control (xconv = 0.00000001, lconv = 1, gconv = 1`) in `logistf` in R should be consistent to the option of `xconv = 0.00000001` in SAS).\n\n3.  **Confidence interval**\n\n-   The `confint()` function in R will computes profile likelihood based CI for `glm` fitted model. However, in SAS, the default confidence interval is Wald CI. To match the default CI calculation in SAS for `glm` fitted model, use `confint.default()` function in R.\n\n-   Nevertheless, Firth's biased-reduced logistic regression estimates parameter using penalized maximum likelihood, it makes more sense to use `confint()` function for `logistf` fitted model. In the meantime, in SAS, when fitting a Firth's logistic regression, it is also better to specify the model statement option `clparm = pl` which will also generate profile penalized likelihood CI.\n\n-   We shall note that in the Firth logistic regression numerical example, the estimated standard errors does not match, but the CIs match at 0.001 level. This is because the CI was estimated based on profile penalized likelihood in R and SAS, and please see the next discussion point for potential reasons about differences between the estimated standard error. (I have compared Wald CIs estimated in R vs SAS, which could not match. This make sense as Wald CIs are calculated based on the estimated standard errors.)\n\n4.  **Hypothesis test and p-value**\n\n-   The default hypothesis tests for the regression coefficients are the same in `glm` and `PROC LOGISTIC`, which are both Wald tests and calculated based on estimates for the regression coefficients and its corresponding standard error.\n\n-   As for `logistf` function, the default hypothesis testing method is based on profile penalized log likelihood (source code [here](https://github.com/georgheinze/logistf/blob/master/R/logistf.R)). And it was noted in the [R documentation](https://cran.r-project.org/web/packages/logistf/logistf.pdf) that, *\"from version 1.24.1 on, the variance-covariance matrix is based on the second derivative of the likelihood of the augmented data rather than the original data, which proved to be a better approximation if the user chooses to set a higher value for the penalty strength.\"* This could cause difference in the estimate of standard error in R vs SAS for Firth logistic regression, and consequently results in differences in the corresponding Wald CI estimates and hypothesis tests results (e.g., p-values).\n\n-   Wald method can be used in a `logistf` function in R by specifying `pl = FALSE` in the `control` argument, which should correspond to the method used in SAS to calculate p-value. However, when specifying `pl = FALSE`, the CI is also calculated using Wald method.\n\n# Reference\n\n-   A relevant blog [here](https://sas-and-r.blogspot.com/2010/11/example-815-firth-logistic-regression.html) (check comments in the blog).\n-   [PROC LOGISTIC statement documentation in SAS](https://support.sas.com/documentation/cdl/en/statug/63033/HTML/default/viewer.htm#statug_logistic_sect004.htm).\n-   [Reference manual for `logistf` package in R](https://cran.r-project.org/web/packages/logistf/logistf.pdf).\n-   [GitHub repository for `logistf` package in R](https://github.com/georgheinze/logistf).\n-   [GitHub repository for a SAS procedure about Firth logistic regression authored by the author of `logistf` R package](https://github.com/georgheinze/flicflac/tree/master/LogisticRegression), which was based on PROC IML instead of PROC LOGISTIC and was probably authored before the availability of Firth option in PROC LOGISTIC statement in SAS.\n-   Ge, Miaomiao, et al. \"Covariate-adjusted difference in proportions from clinical trials using logistic regression and weighted risk differences.\" Drug information journal: DIJ/Drug Information Association 45 (2011): 481-493.\n-   SAS Institute Inc. [\"Predictive margins and average marginal effects.\"](https://support.sas.com/kb/63/038.html) (Last Published: 13 Dec 2023)\n",
    "supporting": [
      "r-sas_logistic-regr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}