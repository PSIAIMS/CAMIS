{
  "hash": "6a38a66f4a654055f72935602e97866e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Deriving Quantiles or Percentiles in R vs SAS\"\n---\n\n\n\n### Data\n\nThe following data will be used show the differences between the default percentile definitions used by SAS and R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10, 20, 30, 40, 150, 160, 170, 180, 190, 200\n```\n:::\n\n\n\n### SAS Code\n\nAssuming the data above is stored in the variable `aval` within the dataset `adlb`, the 25th and 40th percentiles could be calculated using the following code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproc univariate data=adlb;\n  var aval;\n  output out=stats pctlpts=25 40 pctlpre=p;\nrun;\n```\n:::\n\n\n\nThis procedure creates the dataset `stats` containing the variables `p25` and `p40`.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/summarystats/sas-percentiles-output.jpg){fig-align='center' width=15%}\n:::\n:::\n\n\n\nThe procedure has the option `PCTLDEF` which allows for five different percentile definitions to be used. The default is `PCTLDEF=5`.\n\n### R code\n\nThe 25th and 40th percentiles of `aval` can be calculated using the `quantile` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(adlb$aval, probs = c(0.25, 0.4))\n```\n:::\n\n\n\nThis gives the following output.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  25%   40% \n 32.5 106.0 \n```\n\n\n:::\n:::\n\n\n\nThe function has the argument `type` which allows for nine different percentile definitions to be used. The default is `type = 7`.\n\n### Comparison\n\nThe default percentile definition used by the UNIVARIATE procedure in SAS finds the 25th and 40th percentiles to be 30 and 95. The default definition used by R finds these percentiles to be 32.5 and 106.\n\nIt is possible to get the quantile function in R to use the same definition as the default used in SAS, by specifying `type=2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(adlb$aval, probs = c(0.25, 0.4), type=2)\n```\n:::\n\n\n\nThis gives the following output.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n25% 40% \n 30  95 \n```\n\n\n:::\n:::\n\n\n\nIt is not possible to get the UNIVARIATE procedure in SAS to use the same definition as the default used in R.\n\nRick Wicklin provided a [blog post](https://blogs.sas.com/content/iml/2017/05/24/definitions-sample-quantiles.html) showing how SAS has built in support for calculations using 5 of the 9 percentile definitions available in R, and also demonstrated how you can use a SAS/IML function to calculate percentiles using the other 4 definitions.\n\nMore information about quantile derivation can be found in the [SAS blog](https://blogs.sas.com/content/iml/2021/07/26/compare-quantiles-sas-r-python.html).\n\n### Key references:\n\n[Compare the default definitions for sample quantiles in SAS, R, and Python](https://blogs.sas.com/content/iml/2021/07/26/compare-quantiles-sas-r-python.html)\n\n[Sample quantiles: A comparison of 9 definitions](https://blogs.sas.com/content/iml/2017/05/24/definitions-sample-quantiles.html)\n\n[Hyndman, R. J., & Fan, Y. (1996). Sample quantiles in statistical packages. The American Statistician, 50(4), 361-365.](https://www.jstor.org/stable/2684934)\n",
    "supporting": [
      "r-sas-summary-stats_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}