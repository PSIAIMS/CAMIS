{
  "hash": "17314e80b7edd5dbf94947f77885f03e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Get Started with Your Environment\"\n---\n\n\n\nThe following instructions provide a step-by-step workflow to set up your work space. In general, you will need:\n\n**Required/Necessary**\n\n-   [A GitHub Account](https://docs.github.com/en/get-started/start-your-journey/creating-an-account-on-github)\n-   [Git](https://git-scm.com/downloads)\n-   [R version 4\\.4\\.2 \\(2024\\-10\\-31\\)](https://www.r-project.org/)\n    -   If possible, utilize R 4\\.4\\.2, as this is the version utilized in the repository.\n    -   Otherwise, R ≥ 4.1 should be compatible, so long as your version of R is compatible with the R package versions in the [environment](#camis-renv). \n-   [RStudio](https://posit.co/download/rstudio-desktop/) (recommended) or [Positron](https://posit.co/products/ide/positron/)\n    -   These are suggested IDEs for writing and running code. We recommend RStudio.\n    -   Both come bundled with [Quarto](https://quarto.org/docs/get-started/), which is used for writing the reports and comparisons, so no additional setup is needed on your part.\n\n**Optional**\n\n-   SAS\n    -   Requires a paid license.\n-   Python version 3.12.6\n    -   You will not need to separately download Python. In the configuration of this project through subsequent steps, a virtual environment of Python is activated and installed.\n\n### Set up Git, GitHub, RStudio\n\nYou will need to download and setup GitHub, Git, R, and RStudio in order to contribute to CAMIS. Please see the above links to download and configure these for your system.\n\nIn setting up and connecting your RStudio and GitHub accounts, Jenny Bryan has a great book, [Happy Git with R](https://happygitwithr.com), where she talks in much greater depth on connecting RStudio and GitHub.\n\n**Specifically, *Happy Git with R* covers**:\n\n-   [Registering for a GitHub Account](https://happygitwithr.com/github-acct)\n-   [Installing Git](https://happygitwithr.com/install-git) and [An Introduction to Git](https://happygitwithr.com/hello-git)\n-   [Configuring Personal Access Tokens](https://happygitwithr.com/https-pat) and\n-   [Connecting Git, GitHub, and RStudio](https://happygitwithr.com/rstudio-git-github)\n\nAt this point, we assume you have the necessary configurations setup and have RStudio connected to GitHub (not necessarily to the CAMIS project yet).\n\n### Fork the CAMIS Repository\n\nNext, navigate to the [CAMIS Repository](https://github.com/PSIAIMS/CAMIS) and **fork** the repository. Forking the repository will make a copy of the CAMIS repository within your GitHub repository list. This will allow you to make changes and contribute Pull Requests to CAMIS.\n\n![](img/forking.png){width=\"85%\" fig-align=\"center\"}\n\nNow you will have a copy of the CAMIS repository in your list of repositories on GitHub.\n\nIt is really important to understand the next steps in forking and cloning repositories. Before moving on to the next steps, please read the *Happy Git with R* [Chapter on Fork and Clone](https://happygitwithr.com/fork-and-clone). If you are looking to make changes, add a document or comparison, or some other feature through a pull request, you must take some steps in order to properly set up your forked repository. Jenny does a great job walking through the details and differences of `upstream`, `origin`, and describes some handy functions to help get your fork properly configured.\n\n### Clone to Your Own Computer\n\nIf you follow the instructions in *Happy Git with R* [Chapter on Fork and Clone](https://happygitwithr.com/fork-and-clone), you can jump to [this section](#camis-renv).\n\nOnce you've created a copy of this repository, you'll need to clone it from GitHub to your computer. Click the \"Code\" button to do this.\n\nThe method you'll use, either \"HTTPS\" or \"SSH\", depends on how you've connected your computer to GitHub. If you've set up using a PAT, select the \"HTTPS\" tab. If you've used \"SSH\", then choose that tab. Either way, you will need to copy the location in the box.\n\n![](img/clone.png){width=\"85%\" fig-align=\"center\"}\n\n### Create an RStudio Project with Version Control\n\nIn RStudio, you will need to create a new project and select \"Version Control\" in the project wizard. Then you will select \"Git\" and finally paste the location copied from GitHub into the URL box. Finally hit \"Create Project\" and you should be good to go!\n\n![](img/clone2.png){width=\"85%\" fig-align=\"center\"}\n\n### Setting up CAMIS with `renv` {#camis-renv}\n\nThe CAMIS repository utilizes [`renv`](https://rstudio.github.io/renv/articles/renv.html), which is an R package that helps create reproducible environments. Assuming you downloaded [R 4\\.4\\.2](https://www.r-project.org/), which is the version of R associated with this `renv` project, everything should be relatively straightforward.\n\nIf you have R ≥ 4.1, you generally shouldn't have issues, but `renv` will alert you that R 4\\.4\\.2 was used to install the packages and that R 4\\.4\\.2 is different than the R version you are using. As more R packages are added/updated in CAMIS `renv`, there may arise issues if your R version differs greatly from R 4\\.4\\.2. This may require you to install a version of R closer to R 4\\.4\\.2, so please work with your appropriate technology professional to upgrade R.\n\nIf you do not have the `renv` package, you can install it using:\n\n\n\n```r\ninstall.packages(\"renv@1.0.10\") \n```\n\n\n\nThis will install the same version of `renv` as the CAMIS Repository utilizes. Next, you will need to install the specific R and Python packages associated with CAMIS. This can take some time if you do not have some of these already downloaded. Again, because this is a reproducible environment with specific versions of packages (these are listed in a `renv.lock` file), specific versions of these packages will be downloaded and install into this environment. To install these, run the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::restore()\n```\n:::\n\n\n\nAgain, this may take some time to install these packages and requirements. There can be some systems that are not as compatible or may require the installation of other systems outside of R packages. Often, these are related to systems or software for installing the binary packages of R. Please refer to those user manuals and other online resources for their installation. Make sure you have the necessary permissions for installing them.\n\nAs you make contributions to CAMIS, you may also need to add new packages to the `renv.lock` file. You must use `renv` to manage and install these packages like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::install(\"package_name\")\n```\n:::\n\n\n\nIt is also recommended after installation to snapshot these changes using:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\nrenv::restore()\n```\n:::\n\n\n\nThese function calls help to record and update the `renv.lock` file with the package and associated dependencies in a reproducible manner.\n\nAt this point, it is assumed that your system in RStudio is connected to Git and GitHub, and that the `renv` environment is successfully activated. Now every time you close RStudio and reopen the CAMIS project on your computer, you should see the option:\n\n\n\n```default\n- Project '(path/to/CAMIS/project)' loaded. [renv 1.0.10] \n```\n\n\n\n### Create a Branch in RStudio {#create-branch}\n\nNow you should have an RStudio Project that contains all of the CAMIS Repository files. A **highly recommended** step is to create a new branch. A branch separates any changes you make in the forked repository from the Main branch. This allows you to more easily keep up with changes from the CAMIS Repository on the `upstream` branch.\n\nTo create a new branch, find the \"Git\" tab (top right corner) in RStudio. Select the icon to create a new branch. You can name the branch anything, but its helpful to match it with the changes you intend to make. Within the box that comes up, ensure the drop down for **Remote** is set to \"origin\" and the option \"Sync branch with remote\" is checked.\n\n### Contribute Your Changes\n\nNow you can add and edit various files within the CAMIS project. If you are looking for templates to get you started in comparing R packages or comparing specific methods between coding languages, see the templates for only a [Single Language](../templates/single_language_template.qmd) or for comparing [Multiple Languages](../templates/multi_language_template.qmd). These templates are good starting points to model off of, and we recommend you keep the structure similar. Also see [How to Review an R Package](package_review.qmd) for some other guidance.\n\nIf you are adding SAS-related examples, add those to the `SAS/` folder. R-related examples should be added to the `R/` folder. Similarly, Python-related examples should be added to the `Python/` folder. For examples that compare two or more languages (i.e. SAS vs R), add these examples in the `Comp/` folder Follow the naming convention of the files already stored in those folders.\n\n### Commit Changes and Push to Remote\n\nWithin Rstudio, commit each change or new file added, and push these changes to your forked repository. Once you have completed all of the change you want to make, it is time to create a pull request. Before you start creating a pull request, check that your branch on GitHub contains all the changes you want. If your branch on GitHub doesn't contain all your changes, commit and push those from RStudio.\n\n![This is what it will look like if you still need to push](img/push.png){width=\"85%\" fig-align=\"center\"}\n\n### Create a Pull Request\n\nBack on your fork on GitHub, you will see that your repo is now ahead of the main CAMIS repository. The first thing you want to do is make sure that your forked repository is in sync with the main CAMIS Repository. Sync your own `main` branch first and then sync your the branch with your desired changes. Click 'Sync fork':\n\n![](img/make-pr.png){width=\"85%\" fig-align=\"center\"}\n\nIf you are having issues on syncing with `upstream`, *Happy Git with R* has some [guidance](https://happygitwithr.com/upstream-changes). If you have merge conflicts or other issues, *Happy Git with R* has some [recommendations](https://happygitwithr.com/git-branches#dealing-with-conflicts) for how to start resolving these.\n\nNow that you are all synced with `main`, you can create a pull request by clicking on 'Contribute' and then 'Open pull request'. This brings you to a page where you can explain your pull request. It is often helpful to describe the changes you made to make reviewing the pull request easier and the reviewers can better understand your intended changes. If there are any relevant issues that your pull request is related to, also include and link those issues.\n\nFor more details about making pull requests see [create a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request).\n\nOnce your change is approved, and merged into main, you will be able to see your changes on the main CAMIS GitHub repository. You can then delete your branch in your forked repository and sync any other branches with the `upstream` CAMIS repository.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}