{
  "hash": "cc88024b222522a6cbf620c1a82bb75b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Rounding in SAS\"\n---\n\n\nThere are two rounding functions in SAS.\n\nThe **round()** function in SAS will round to the nearest whole number and 'away from zero' or 'rounding up' when equidistant meaning that exactly 12.5 rounds to the integer 13.\n\nThe **rounde()** function in SAS will round to the nearest whole number and 'rounding to the even number' when equidistant, meaning that exactly 12.5 rounds to the integer 12.\n\nBoth functions allow you to specify the number of decimal places you want to round to.\n\nFor example (See references for source of the example)\n\n\n```{sas}\n#| eval: false\ndata XXX;\n  my_number=2.2;   decimal_paces=1; output;\n  my_number=2.2;   decimal_paces=2;  output;\n  my_number=2.2;;  decimal_paces=3 output;\n  my_number=3.99;  decimal_paces=1;  output;\n  my_number=3.99;  decimal_paces=2; output;\n  my_number=3.99;  decimal_paces=3; output;\n  my_number=1.2345; decimal_paces=1;  output;\n  my_number=1.2345; decimal_paces=2; output;\n  my_number=1.2345; decimal_paces=3; output;\n  my_number=7.876; decimal_paces=1;  output;\n  my_number=7.876; decimal_paces=2; output;\n  my_number=7.876; decimal_paces=3; output;\n  my_number=13.8739; decimal_paces=1;   output;\n  my_number=13.8739; decimal_paces=2;  output;\n  my_number=13.8739; decimal_paces=3;  output;\nrun;\n\ndata xxx2;\n  set xxx;\n\tround = round(my_number, decimal_places);\n  rounde = rounde(my_number, decimal_places);\nrun;\n```\n\n\n| my_number  | decimal_places | round     | rounde    |\n|------------|----------------|-----------|-----------|\n| 2.2        | 0.1            | 2.2       | 2.2       |\n| 2.2        | 0.01           | 2.2       | 2.2       |\n| 2.2        | 0.001          | 2.2       | 2.2       |\n| 3.99       | 0.1            | 4         | 4         |\n| 3.99       | 0.01           | 3.99      | 3.99      |\n| 3.99       | 0.001          | 3.99      | 3.99      |\n| **1.2345** | 0.1            | 1.2       | 1.2       |\n| **1.2345** | 0.01           | 1.23      | 1.23      |\n| **1.2345** | 0.001          | **1.235** | **1.234** |\n| 7.876      | 0.1            | 7.9       | 7.9       |\n| 7.876      | 0.01           | 7.88      | 7.89      |\n| 7.876      | 0.001          | 7.876     | 7.876     |\n| 13.8739    | 0.1            | 13.9      | 13.9      |\n| 13.8739    | 0.01           | 13.87     | 13.87     |\n| 13.8739    | 0.001          | 13.874    | 13.874    |\n\nIn some rare cases, `round()` does not return result as expected. For example below.\n\n\n```{sas}\n#| eval: false\ndata incorrect_round;\n    *rounded=32768.015625, but it should be 32768.015626;\n    rounded=round(32768.0156255,1e-6); output;\n    *rounded=0.137, but it should be 0.138;\n    rounded=round(2048.1375-2048,1e-3); output;\nrun;\n```\n\n\nYou can find a little more by the code below. It creates dummy numbers with different numbers of decimal digits, and filter incorrect results. Note, the incorrect results are expected when the input number is near or beyond the precision level, i.e. the last decimal of the input number is near or less than the number multiplied by `constant('maceps')`.\n\n\n```{sas}\n#| eval: false\ndata dum1;\n    int1=0; output;\n    do i=1 to 25;\n      int1=2**i; output;\n    end;\n    keep int1;\nrun;\n\ndata dum2;\n    do round_digits=1 to 7;\n      *x.xxx5 should be rounded up, or replace 5 to 4.99 which should be rounded down;\n      dec1=2**(-round_digits)+10**(-round_digits-1)*5;\n      output;\n    end;\n    keep dec1 round_digits;\nrun;\n\nproc sql;\n    create table incorrect_round2(where=(rounded<num1)) as\n    select dum1.*,dum2.*,int1+dec1 as num1,round(calculated num1,10**(-round_digits)) as rounded\n    from dum1, dum2;\nquit;\n```\n\n\nOr more by the code below and comparing with results from another language, e.g. R.\n\n\n```{sas}\n#| eval: false\ndata dum1;\n    dec1=0; int1=0; output;\n    do i=0 to 12;\n      dec1=2**(-i);\n      dec1=dec1*1.1;\n      int1=2**i;\n      output;\n    end;\nrun;\n\nproc sql;\n    create table dum3 as select dec1+int1 as num1 from dum1(keep=dec1) a, dum1(keep=int1) b;\n    create table dat1 as select a.num1,b.num1 as num2 from dum3 a, dum3 b;\nquit;\n\ndata dat2;\n    set dat1;\n    operator='+'; num3=num1+num2; output;\n    operator='-'; num3=num1-num2; output;\n    if num1^=0 and num2^=0 then do;\n      operator='*'; num3=num1*num2; output;\n      operator='/'; num3=num1/num2; output;\n    end;\nrun;\n\ndata dat3;\n    set dat2;\n    rounded=round(num3,1e-3);\nrun;\n```\n\n\nAs the incorrect rounding all occur on large number, `round()` is still reliable in most of cases.\n\n**References**\n\n[How to Round Numbers in SAS - SAS Example Code](https://sasexamplecode.com/how-to-round-numbers-in-sas/)\n\n",
    "supporting": [
      "rounding_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}