---
title: "MMRM in R"
---

## Fitting the MMRM in R

Mixed models for repeated measures (MMRM) are a popular choice for analyzing longitudinal continuous outcomes in randomized clinical trials and beyond; see [Cnaan, Laird and Slasor (1997)](https://doi.org/10.1002/(SICI)1097-0258(19971030)16:20<2349::AID-SIM667>3.0.CO;2-E) for a tutorial and [Mallinckrodt, Lane and Schnell (2008)](https://doi.org/10.1177/009286150804200402) for a review. 

This vignette shows examples from the `mmrm` package.

The `mmrm` package implements MMRM based on the marginal linear model without  random effects using Template Model Builder (`TMB`) which enables fast and  robust model fitting. Users can specify a variety of covariance matrices, weight observations, fit models with restricted or standard maximum likelihood inference, perform hypothesis testing with Satterthwaite or Kenward-Roger adjustment, and extract least
square means estimates by using `emmeans`.

### Main Features

* Flexible covariance specification:
  * [Structures](https://openpharma.github.io/mmrm/main/articles/covariance.html): unstructured, Toeplitz, AR1, compound symmetry, ante-dependence, and spatial exponential.
  * Groups: shared covariance structure for all subjects or group-specific
covariance estimates.
  * Variances: homogeneous or heterogeneous across time points.
* Inference:
  * Supports REML and ML.
  * Supports weights.
* Hypothesis testing:
  * [Least square means](https://openpharma.github.io/mmrm/main/reference/emmeans_support.html):
    can be obtained with the `emmeans` package
  * One- and multi-dimensional linear contrasts of model parameters can be tested.
  * [Satterthwaite](https://openpharma.github.io/mmrm/main/articles/satterthwaite.html)
    adjusted degrees of freedom.
  * [Kenward-Roger](https://openpharma.github.io/mmrm/main/articles/kenward.html)
    adjusted degrees of freedom and coefficients covariance matrix.
  * [Coefficient Covariance](https://openpharma.github.io/mmrm/main/articles/coef_vcov.html)
* `C++` backend:
  * Fast implementation using `C++` and automatic differentiation to
    obtain precise gradient information for model fitting.
  * Model fitting algorithm [details](https://openpharma.github.io/mmrm/main/articles/algorithm.html) used in `mmrm`.
* Package ecosystems integration:
  * Integration with [tidymodels](https://www.tidymodels.org/) package ecosystem
    * Dedicated [parsnip](https://parsnip.tidymodels.org/) engine for linear regression
    * Integration with [recipes](https://recipes.tidymodels.org/)
  * Integration with [tern](https://insightsengineering.github.io/tern/) package ecosystems
    * The [tern.mmrm](https://insightsengineering.github.io/tern.mmrm/) package can be used to run the `mmrm` fit and generate tabulation and plots of least square means per visit and treatment arm, tabulation of model diagnostics, diagnostic graphs, and other standard model outputs.

### Using the `mmrm::mmrm` function

See also the [introductory vignette](https://openpharma.github.io/mmrm/main/articles/introduction.html)

The code below implements an MMRM fit in R with the `mmrm::mmrm` function.

```{r}
library(mmrm)
fit <- mmrm::mmrm(
  formula = FEV1 ~ RACE + SEX + ARMCD * AVISIT + us(AVISIT | USUBJID),
  data = fev_data
)
```

The code specifies an MMRM with the given covariates and an unstructured covariance matrix for the timepoints (also called visits in the clinical trial context, here given by `AVISIT`) within the subjects (here `USUBJID`). While by default this uses restricted maximum likelihood (REML), it is also possible to use ML, see `?mmrm`.

Printing the object will show you output which should be familiar to anyone who has used any popular modeling functions such as `stats::lm()`, `stats::glm()`, `glmmTMB::glmmTMB()`, and `lme4::nlmer()`. From this print out we see the function call, the data used, the covariance structure with number of variance parameters, as well as the likelihood method, and model deviance achieved. Additionally the user is provided a printout of the estimated coefficients and the model convergence information:

```{r}
#| label: print
fit
```

The `summary()` method then provides the coefficients table with Satterthwaite degrees of freedom as well as the covariance matrix estimate:

```{r}
#| label: summary
fit |>
  summary()
```

### Extracting effect estimates using `emmeans`

In order to extract relevant marginal means (LSmeans) and contrasts we can use the `emmeans` package. This package includes methods that allow `mmrm` objects to be used with the `emmeans` package. `emmeans` computes estimated marginal means (also called least-square means) for the coefficients of the MMRM.

```{r}
#| label: emmeans
library(emmeans)

emmeans(fit, ~ ARMCD | AVISIT)
```

Note that the degrees of freedom choice is inherited here from the initial `mmrm`
fit.
