---
title: "Wilcoxon Rank Sum (Mann Whitney-U) in R"
---

```{r}
#| echo: false
#| include: false
library(tidyverse)
library(coin)
library(asht)
```

# Overview

Wilcoxon rank sum test, or equivalently, Mann-Whitney U-test is a rank based non-parametric method. The aim is to compare two independent groups of observations. Under certain scenarios, it can be thought of as a test for median differences, however this is only valid when: 1) both samples are independent and identically distributed (same dispersion, same shape, not necessarily normal) and 2) are symmetric around their medians.

Generally, with two samples of observations (A and B), the test uses the mean of each possible pair of observations in each group (including the pair of each value with itself) to test if the probability that (A\>B) \> probability (B\>A).

The Wilcoxon rank sum test is often presented alongside a Hodges-Lehmann estimate of the pseudo-median (the median of the Walsh averages), and an associated confidence interval for the pseudo-median.

A tie in the data exists when an observation in group A, has the same result as an observation in group B.

## Available R packages

There are three main implementations of the Wilcoxon rank sum test in R.

-   [stats::wilcox.test()](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/wilcox.test)

-   [coin::wilcox_test()](https://cran.r-project.org/web/packages/coin/coin.pdf)

-   [asht::wmwTest()](https://cran.r-project.org/web/packages/asht/asht.pdf)

The `stats` package implements various classic statistical tests, including Wilcoxon rank sum test. Although this is arguably the most commonly applied package, this one does not account for any ties in the data. To account for ties in the data, the `coin` or `asht` package should be used.

```{r}
#| eval: false
#| echo: true
# x, y are two unpaired vectors. Do not necessary need to be of the same length.
stats::wilcox.test(x, y, paired = FALSE)
```

## Example: Birth Weight

*Data source: Table 30.4, Kirkwood BR. and Sterne JAC. Essentials of medical statistics. Second Edition. ISBN 978-0-86542-871-3*

Comparison of birth weights (kg) of children born to 15 non-smokers with those of children born to 14 heavy smokers.

```{r}
#| eval: true
#| echo: true
# bw_ns: non smokers
# bw_s: smokers
# fmt: skip
bw_ns <- c(3.99, 3.89, 3.6, 3.73, 3.31, 
            3.7, 4.08, 3.61, 3.83, 3.41, 
            4.13, 3.36, 3.54, 3.51, 2.71)
# fmt: skip
bw_s <- c(3.18, 2.74, 2.9, 3.27, 3.65, 
          3.42, 3.23, 2.86, 3.6, 3.65, 
          3.69, 3.53, 2.38, 2.34)
```

We do note that there are ties present in the data. Can visualize the data on two histograms. Red lines indicate the location of medians.

```{r}
#| eval: true
#| echo: true
par(mfrow = c(1, 2))
hist(bw_ns, main = 'Birthweight: non-smokers')
abline(v = median(bw_ns), col = 'red', lwd = 2)
hist(bw_s, main = 'Birthweight: smokers')
abline(v = median(bw_s), col = 'red', lwd = 2)
```

It is possible to see that for non-smokers, the median birthweight is higher than those of smokers. Now we can formally test it with wilcoxon rank sum test.

## stats::wilcox.test()

In `stats::wilcox.test()` the exact p-value is computed when there are less than 50 values and no ties otherwise the normal approximation is used. In our data case, because there are ties the normal approximation is used.

The default for the normal approximation is to use a continuity correction. One can add the argument `correct=FALSE` to not perform a continuity correction.

```{r}
#| eval: true
#| echo: true
# default is two sided
stats::wilcox.test(bw_s, bw_ns, paired = FALSE)
stats::wilcox.test(bw_s, bw_ns, paired = FALSE, correct = FALSE)
```

We can also carry out a one-sided test, by specifying `alternative = "less"` (if the first group is expected to be smaller than the second group) or `alternative = "greater"`.

```{r}
#| eval: true
#| echo: true
# perform one-sided test
stats::wilcox.test(bw_s, bw_ns, paired = FALSE, alternative = "less")
```

By setting `conf.int=TRUE` a confidence interval of the location parameter (x-y) is computed. Note that in the two-sample case the estimator for the difference in location parameters does not estimate the difference in medians (a common misconception) but rather the median of the difference between a sample from x and a sample from y. Note that the algorithm used for the estimation of the location parameter and confidence interval is not discussed in the help of the function (in the source code of the `stats::wilcox.test()` it is only mentioned that "Algorithm not published, thus better documented here.").

By default a 95% confidence interval is provided. This can be changed by the argument `conf.level`.

```{r}
#| eval: true
#| echo: true
# Add conf.int = TRUE
stats::wilcox.test(bw_s, bw_ns, paired = FALSE, conf.int = TRUE)
```

The argument `exact = TRUE` can be added to ask for an exact p-value to be computed. However, in our data case as there are ties this does not work.

```{r}
#| eval: true
#| echo: true
# force exact, but does not work because we have ties
stats::wilcox.test(bw_s, bw_ns, paired = FALSE, conf.int = TRUE, exact = TRUE)
```

## coin::wilcox_test()

In order to account for the ties, `wilcox_test` from the `coin` package should be used. For this function, the data needs to be inputted via a formula where the right hand side is a factor, so we need to create a dataset. In order to get results for *smokers - non-smokers* we need to relevel the factors.

```{r}
#| eval: true
#| echo: true

smk_data <- data.frame(
  value = c(bw_ns, bw_s),
  smoke = as.factor(rep(c("non", "smoke"), c(length(bw_ns), length(bw_s))))
)
smk_data$smoke <- forcats::fct_relevel(smk_data$smoke, "smoke")
smk_data$smoke
```

Now the data is in the right shape we can run `wilcox_test`. By default, `coin::wilcox_test` does a normal approximation approach without continuity correction. One can add again `alternative="less"` (or `alternative="greater"`) for one-sided testing.

```{r}
coin::wilcox_test(value ~ smoke, data = smk_data)
```

We do note that a normal approximation approach with continuity correction cannot be obtained with this function. One can add `correct=FALSE`, but note that no error is given and the results of a normal approximation approach without continuity correction is provided.

```{r}
coin::wilcox_test(value ~ smoke, data = smk_data, correct = FALSE)
```

By including the `conf.int = TRUE` argument, confidence intervals for the difference in location are computed. According to the `coin` package documentation this is done according to Bauer (1972) \[Bauer, D. F. (1972). Constructing confidence sets using rank statistics. Journal of the American Statistical Association 67(339), 687â€“690\] and Hollander and Wolfe (1999) \[Hollander, M. and Wolfe, D. A. (1999). Nonparametric Statistical Methods, Second Edition. New York: John Wiley & Sons.\]. Note that the `conf.level` argument controls the confidence level, but must be used with `conf.int = TRUE` otherwise you won't get a confidence interval.

```{r}
coin::wilcox_test(value ~ smoke, data = smk_data, conf.int = TRUE)
```

Using `coin` one can calculate exact and Monte Carlo conditional p-values using the `distribtuion` argument. The exact p-value is best used in small sample sizes.

```{r}
coin::wilcox_test(
  value ~ smoke,
  data = smk_data,
  conf.int = TRUE,
  distribution = "exact"
)
```


For doing an approximative (Monte Carlo) (with 500 and 500000 samples) the following code can be used.

```{r}
coin::wilcox_test(
  value ~ smoke,
  data = smk_data,
  conf.int = TRUE,
  distribution = approximate(nresample = 500)
)
coin::wilcox_test(
  value ~ smoke,
  data = smk_data,
  conf.int = TRUE,
  distribution = approximate(nresample = 500000)
)
```

<!-- *Note:* the distribution argument only effects the p-value and estimate of difference in location. In contrast, `coin` consistently calculated the exact Hodges-Lehmann confidence intervals. -->


## asht::wmwTest()

The `asht::wmwTest()` function calculates the Wilcoxon-Mann-Whitney test (normal approximation, exact complete enumeration, and exact Monte Carlo implementation) together with confidence intervals on the Mann-Whitney parameter, Pr[X<Y] + 0.5 Pr[X=Y].

By default, the function returns the normal approximation using a continuity correction. The `correct` argument is available to turn-off the continuity correction. The `alternative` argument is available for one-sided testing. By default, the 95% confidence interval is calculated for the Mann-Whitney parameter (use argument `conf.int` and `conf.level` to change these defaults.). Details on the calculation of the confidence interval are provided in Newcombe (2006) \[Newcombe, Robert G. (2006). Confidence intervals for an effect size measure based on the Mann-Whitney statistic. Part 2: asymptotic methods and evaluation. Statistics in medicine 25(4): 559-573\].

```{r}
asht::wmwTest(bw_s, bw_ns)
```

Using the `method` argument one can change from normal approximation to exact complete enumeration (`method = "exact.ce"`), and exact Monte Carlo (`method = "exact.mc"`) implementation. When `method = "exact.mc"`, the test is implemented using complete enumeration of all permutations, and hence is only tractible for very small sample sizes (less than 10 in each group). Here, we show an example of `method = "exact.mc"`.

```{r}
asht::wmwTest(
  bw_s,
  bw_ns,
  method = "exact.mc",
  control = asht::wmwControl(nMC = 100000)
)
```


## Useful References

-   [Methods and Formulae](https://support.minitab.com/en-us/minitab/help-and-how-to/statistics/nonparametrics/how-to/1-sample-wilcoxon/methods-and-formulas/methods-and-formulas)
-   [Mann Whitney is not about medians in general](https://github.com/adrianolszewski/Mann-Whitney-is-not-about-medians-in-general/blob/main/Mann_Whitney_Wilcoxon_fails_as_test_of_medians_literature.md)
-   [Relationship between walsh averages and WRS](https://stats.stackexchange.com/questions/215889/prove-the-relationship-between-walsh-averages-and-wilcoxon-signed-rank-test)
-   [Hodges Lehmann Problems](https://aakinshin.net/posts/r-hodges-lehmann-problems)
