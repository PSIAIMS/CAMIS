---
title: "R vs EAST Group sequential design"
editor_options: 
  chunk_output_type: console
---

## Introduction

In this vignette, we briefly compare sample size/power calculations for a group sequential design (GSD) for time to event endpoints between EAST and [gsDesign](https://keaven.github.io/gsDesign/), [gsDesign2](https://merck.github.io/gsDesign2/), and [rpact](https://www.rpact.org/). Note that, a comparison between rpact and gsDesign has been previously reported [here](https://www.rpact.org/vignettes/planning/rpact_vs_gsdesign_examples/#comparison-analysis-time-of-rpact-vs.-gsdesign).

There are two main methods that are generally used for GSD sample-size/power calculations for time to event endpoints under proportional hazard assumption:

-   Lachin & Foulkes (LF) Method (1986)
-   Kim & Tsiatis (KT) Method (1990)

The main difference between the two methods is that LF method requires specification of accrual duration as well as study duration, while KT method calculates study duration iteratively given accrual rates and accrual duration. In general, these two methods produce similar, but not identical results.

Both LF and KT methods are implemented in gsDesign, while KT method is implemented in EAST and rpact. gsDesign2 uses a modification of the LF method while applying an average hazard ratio (AHR) approach for non-proportional hazards (Schemper, Wakounig, and Heinze, 2009, Yung and Liu 2020). gsDesign2 also enables use of the sample size method of Yung and Liu (2020).

One additional computational difference to note for EAST vs gsDesign/gsDesign2 is the usage of different log hazard ratio variance assumptions. By default, EAST uses the variance under the null hypothesis and provides an option for using the variance under the alternative hypothesis. gsDesign, on the other hand, is using both of these variances as suggested by Lachin and Foulkes (1986). gsDesign2 has `info_scale` argument in `gsDesign2::gs_power_ahr()`, `gsDesign2::gs_design_ahr()`, which could be set to variance under the null or alternative hypothesis or to the combination of variances.

Below we provide an example of reproducing EAST results from [this vignette](https://psiaims.github.io/CAMIS/East/gsd-tte.html) using gsDesign/gsDesign2/rpact. As shown in the example, gsDesign2 and rpact can reproduce EAST calculations for GSD boundaries, while gsDesign results have minor differences. gsDesign has an option under development to support a complete concordance with EAST.

## Design example

We assume that a GSD is utilized for progression-free survival (PFS) endpoint. It will be tested at one interim analysis (IA) for both efficacy and non-binding futility and then at final analysis (FA). O'Brien-Fleming spending function will be used for efficacy testing and Hwang-Shih-DeCani spending function with $\gamma = -10$ will be used for futility.

Further design assumptions are as follows:

```{r}
# PFS HR=0.6
hr1_pfs <- 0.6
# median PFS of 9.4 months in the control arm
med_pfs <- 9.4
# minimum follow-up of 10 months for PFS
minfu_pfs <- 10
# Monthly exponential dropout of 0.019  for PFS
do_rate_pfs <- 0.019
# IA timing for PFS is at approximately 75% information fraction, and is derived 
# using the number of events that was calculated by EAST which sets integer event counts to approximate targeted information
timing_pfs_rpact <- c(176/235, 1)
timing_pfs_gs <- c(0.75, 1)


# power of approximately 95% for PFS, EAST reported power will be used
power_pfs <- 0.9505021

# Enrollment period of 24 months
enroll_dur <- 24
# 1:1 randomization ratio
rand_ratio <- 1
# alpha level of 1.25%
alphal <- 0.0125
```

We assume that EAST was initially used to calculate the target number of events and the total sample size, and we will use gsDesign/gsDesign2/rpact to reproduce those.

Note that, in EAST the number of target events is reported as an integer, however, gsDesign/gsDesign2/rpact by default provide non-integer values which match *exactly* the specified information fraction. Both gsDesign/gsDesign2 can facilitate computations using integer number of events with `gsDesign::toInteger()` and `gsDesign2::to_integer()` as shown below. In order to reproduce EAST results with rpact, we will use the number of events that was calculated in EAST for `informationRates` argument in `rpact::getDesignGroupSequential()`: 176 and 235 PFS events for IA and FA respectively (please see the `timing_pfs_rpact` object in the code above).

For ease of comparison the results from EAST are summarized below:

```{r, echo=FALSE, warning=FALSE}
library(flextable)
pfs_east <- tibble::tribble(
  ~analysis, ~value, ~eff_125, ~fut_125,
  
  'IA1: 75%',   'Z',                   -2.66061816777219,    -0.737875107680373,      
  'N=398',      'p (1-sided)',          0.00389986763783808,  0.230295173346809,     
  'Events: 176','HR at bound',          0.66958090275829,     0.894725011245211,       
  'Month: 25',  'P(Cross) if HR=1',     0.00389986763798537,  0.769704826650478,      
  '',           'P(Cross) if HR=0.60',  0.766636789739935,    0.00401793753815654,    
  
  
  'FA',         'Z',                    -2.27984962243414,    NA_real_,                
  'N=398',      'p (1-sided)',           0.0113083043872851,  NA_real_,              
  'Events: 235','HR at bound',           0.742715672692114,   NA_real_,              
  'Month: 34',  'P(Cross) if HR=1',      0.0125,              NA_real_,                         
  '',           'P(Cross) if HR=0.60',   0.9505021,           NA_real_            
)

pfs_east |> 
  flextable() |>
  autofit() |>
  set_header_labels(
    analysis = 'Analysis',
     value= 'Value',
     eff_125 = "Efficacy",
     fut_125 = "Futility"
    ) |>
  hline(i = c(5, 10)) |>
  colformat_double(j = c(3, 4), digits = 4)
```

-   The comparison between EAST and gsDesign/gsDesign/rpact results is presented below using absolute difference in efficacy/futility boundaries and crossing probabilities up to 4 decimals. Non-zero values are highlighted.
-   Note that, in gsDesign/gsDesign Efficacy/Futility bounds refer to upper/lower bounds respectively, while in EAST these refer to the opposite directions, i.e., lower/upper bounds respectively. For the comparison purposes, we will assume that Efficacy/Futility bounds refer to upper/lower bounds respectively.

## Code to reproduce EAST results

### gsDesign code

-   gsDesign code to reproduce the above EAST results:

```{r, warning=FALSE}
library(gsDesign)
pfs_gsDesign <- gsSurv(
  k = length(timing_pfs_gs),
  timing = timing_pfs_gs, 
  R = enroll_dur, 
  eta =  do_rate_pfs, 
  minfup = minfu_pfs,
  T = enroll_dur + minfu_pfs, 
  lambdaC = log(2)/med_pfs,
  hr = hr1_pfs,
  beta = 1 - power_pfs,
  alpha = alphal,
  sfu = sfLDOF,
  sfl = sfHSD, 
  sflpar = -10,
  test.type = 4
  ) |> 
  toInteger()
  

pfs_gsDesign |> gsBoundSummary()
```

-   gsDesign vs EAST comparison using absolute differences:

```{r, echo=FALSE}
digit_comp <- 4
pfs_gsDesign |>
  gsBoundSummary(digits = digit_comp) |>
  dplyr::select(eff_gs = Efficacy, fut_gs = Futility) |>
  dplyr::bind_cols(
    pfs_east |> 
      dplyr::select(
        value, analysis, eff_east = eff_125, fut_east = fut_125
        ) |>
      dplyr::mutate(
        eff_east = ifelse(value == 'Z', -eff_east, eff_east),
        fut_east = ifelse(value == 'Z', -fut_east, fut_east)
        )
    ) |>
  dplyr::mutate(
    diff_eff_gsDesign =  abs(eff_east - eff_gs),
    diff_fut_gsDesign =  abs(fut_east - fut_gs)

    ) |>
  dplyr::select(
    Analysis = analysis, Value = value, diff_eff_gsDesign,
    diff_fut_gsDesign
    ) |>
  flextable::flextable() |>
  flextable::autofit() |>
    flextable::set_header_labels(
    diff_eff_gsDesign = 'Efficacy',
    diff_fut_gsDesign = 'Futility'
  ) |>
  flextable::hline(i = c(5, 10)) |>
  flextable::colformat_double(j = c(3, 4), digits = digit_comp) |>
  flextable::bg(
    ~ round(abs(diff_eff_gsDesign), digit_comp) != 0,
    ~ diff_eff_gsDesign, bg = '#6ECEB2'
    ) |>
  flextable::bg(
    ~ round(abs(diff_fut_gsDesign), digit_comp) != 0,  ~
      diff_fut_gsDesign, bg = '#6ECEB2'
    ) 
```

### gsDesign2 code

-   gsDesign2 code to reproduce the above EAST results appears below.
-   Note that, here `gsDesign2::gs_power_ahr()` is used given the number of target events for each analysis based on EAST results.

```{r, echo=FALSE}
#helper function to align the gsDesign2 summary with gsDesign summary
as_gs <- function(xnph){
  
  k <- max(xnph$bound$analysis) # better to have it in gs_design_ahr() output
  ratio <- 1 # better to have it in gs_design_ahr() output
  
  timing_df <- tibble::tibble(
    analysis = seq(k),
    timing = xnph$analysis$event[1:k] / max(xnph$analysis$event)
  )
  x <- xnph$bound %>% 
    dplyr::left_join(
      timing_df,
      by = 'analysis') %>% 
    dplyr::mutate(
      bound = dplyr::case_when(
        bound=='upper'~'Efficacy', 
        bound=='lower'~'Futility'
      )
    ) %>%
    dplyr::left_join(
      xnph$analysis %>%
        dplyr::select(analysis, n, event, ahr, time),
      by = 'analysis'
    )
  
  t1 <- x %>% 
    dplyr::select(analysis, timing, bound, z) %>% 
    dplyr::mutate(
      id = analysis,
      analysis = ifelse(
        analysis!=k, 
        paste0("IA ", analysis, ": ", round(100 * timing, 0), "%"),
        "Final"),
      value = "Z"
    ) %>% 
    dplyr::mutate(z = ifelse(z %in% c(-Inf, Inf), NA, z)) %>%
    tidyr::pivot_wider(
      id_cols = c(id, analysis, value), 
      names_from = bound, values_from = z
    )
  
  t2 <- x %>% 
    dplyr::select(analysis, n, bound, pval = `nominal p`) %>% 
    dplyr::mutate(
      id = analysis, 
      analysis = paste0("N: ", ifelse((ceiling(n) %%2) == 0, ceiling(n), ceiling(n) + 1)),
      value = "p (1-sided)"
      )%>% 
    tidyr::pivot_wider(
      id_cols = c(id, analysis, value), 
      names_from = bound, 
      values_from = pval) 
  
  t3 <- x %>% 
    dplyr::select(analysis, event, z, bound, ahr) %>% 
    dplyr::mutate(
      id = analysis, 
      analysis = paste0("Events: ", round(event, 0)),
      value = "~HR at bound",
      hr = ifelse(z %in% c(-Inf, Inf), 
                  NA, 
                  gsDesign::zn2hr(z = z, n = event, hr0 = 1, hr1 = ahr, ratio = xnph$input$ratio))
    ) %>% 
    tidyr::pivot_wider(
      id_cols = c(id, analysis, value), 
      names_from = bound, 
      values_from = hr) 
  
  fr <- xnph$fail_rate
  fr$hr <- 1
  
  t4 <- x %>% 
    dplyr::select(analysis, time, z, bound, ahr, probability0) %>% 
    dplyr::mutate(
      id = analysis, 
      analysis = paste0("Month: ", round(time)),
      value = "P(Cross) if HR=1"
    ) %>%  
    tidyr::pivot_wider(
      id_cols = c(id, analysis, value), 
      names_from = bound, 
      values_from = probability0
    )
  
  t5 <- x %>% 
    dplyr::select(analysis, time, z, bound, probability, ahr) %>% 
    dplyr::mutate(
      probability = ifelse(z %in% c(-Inf, Inf), NA, probability),
      id = analysis, 
      analysis = "",
      value = paste0("P(Cross) if AHR=", round(ahr, 2))
    )  %>% 
    tidyr::pivot_wider(
      id_cols = c(id, analysis, value), 
      names_from = bound, 
      values_from = probability
    )
  
  rbind(t1, t2, t3, t4, t5) %>% 
    dplyr::group_by(id) %>% 
    dplyr::arrange(id) %>% 
    dplyr::ungroup() %>% 
    dplyr::select(-c(id)) %>% 
    data.frame()
}

```

```{r, warning=FALSE, message=FALSE}
library(gsDesign2)
library(tibble)
enroll_rate <- tibble(
  stratum = "All", 
  duration = enroll_dur,
  rate = 398/enroll_dur
)
fail_rate_pfs <- tibble(
  stratum = "All", 
  duration = Inf, #could be set to Inf when proportional hazard is assumed
  fail_rate = log(2)/med_pfs,
  hr = hr1_pfs, 
  dropout_rate = do_rate_pfs
  )

pfs_gsDesign2 <- gs_power_ahr(
  enroll_rate = enroll_rate,
  fail_rate = fail_rate_pfs,
  ratio = rand_ratio, 
  event = c(176, 235),
  upper = gs_spending_bound, 
  upar = list(
    sf = gsDesign::sfLDOF, 
    total_spend = alphal
    ), 
  lower = gs_spending_bound,
  lpar = list(
    sf = gsDesign::sfHSD, 
    total_spend = 1 - power_pfs, 
    param = -10
    ),
  info_scale = "h0_info"
  ) |> 
  to_integer()

pfs_gsDesign2 |>
  summary() |>
  gsDesign2::as_gt()
```

-   gsDesign2 vs EAST comparison using absolute differences:

```{r, echo=FALSE}
pfs_gsDesign2 |>
  as_gs()|>
  dplyr::select(eff_gs2 = Efficacy, fut_gs2 = Futility) |>
  dplyr::bind_cols(
    pfs_east |>
      dplyr::select(
        value, analysis, eff_east = eff_125, fut_east = fut_125
        ) |>
      dplyr::mutate(
        eff_east = ifelse(value == 'Z', -eff_east, eff_east),
        fut_east = ifelse(value == 'Z', -fut_east, fut_east)
        )
    ) |>
  dplyr::mutate(
    diff_eff_gsDesign =  abs(eff_east - eff_gs2),
    diff_fut_gsDesign =  abs(fut_east - fut_gs2)

    ) |>
  dplyr::select(
    Analysis = analysis, Value = value,
    diff_eff_gsDesign, diff_fut_gsDesign
    ) |>
  flextable::flextable() |>
  flextable::autofit() |>
    flextable::set_header_labels(
    diff_eff_gsDesign = 'Efficacy',
    diff_fut_gsDesign = 'Futility'
  ) |>
  flextable::hline(i = c(5, 10)) |>
  flextable::colformat_double(j = c(3, 4), digits = digit_comp) |>
  flextable::bg(
    ~ round(abs(diff_eff_gsDesign), digit_comp) != 0,  ~
      diff_eff_gsDesign, bg = '#6ECEB2'
    ) |>
  flextable::bg(
    ~ round(abs(diff_fut_gsDesign), digit_comp) != 0,  ~
      diff_fut_gsDesign, bg = '#6ECEB2'
    ) 
```

### rpact code

-   rpact code to reproduce the above EAST results appears below.

```{r, warning=FALSE}
library(rpact)
pfs_rpact_gsd <- getDesignGroupSequential(
  sided = 1, 
  alpha = alphal,
  informationRates = timing_pfs_rpact,
  typeOfDesign = "asOF",
  beta = 1 - power_pfs,
  typeBetaSpending = "bsHSD",
  gammaB = -10,
  bindingFutility = FALSE
  )

pfs_rpact <- getSampleSizeSurvival(
  design = pfs_rpact_gsd,
  accrualTime = enroll_dur,
  followUpTime = minfu_pfs,
  lambda2 = log(2)/med_pfs,
  hazardRatio = hr1_pfs,
  dropoutRate1 = 0.2, 
  dropoutRate2 = 0.2, 
  dropoutTime = 12
)

kable(summary(pfs_rpact))
```

-   rpact vs EAST comparison using absolute differences:

```{r, echo=FALSE}
pcross_h1_eff <- cumsum(pfs_rpact$rejectPerStage)
pcross_h1_fut <- pfs_rpact$futilityPerStage[1]
hr_bound_eff <- pfs_rpact$criticalValuesEffectScale
hr_bound_fut <- pfs_rpact$futilityBoundsEffectScale
pval_eff <- pfs_rpact$criticalValuesPValueScale
pval_fut <- pfs_rpact$futilityBoundsPValueScale 
zval_eff <- pfs_rpact_gsd$criticalValues
zval_fut <- pfs_rpact_gsd$futilityBounds
pcross_h0_eff <- pfs_rpact_gsd$alphaSpent
pcross_h0_fut <- summary(pfs_rpact)$summaryItems |>
  Filter(\(x) x$title == "Exit probability for futility (under H0)", x = _) |>
  sapply(\(x) as.numeric(x$values))

ia1_eff <- c(zval_eff[1], pval_eff[1], hr_bound_eff[1], pcross_h0_eff[1], pcross_h1_eff[1])
fa_eff <-  c(zval_eff[2], pval_eff[2], hr_bound_eff[2], pcross_h0_eff[2], pcross_h1_eff[2])

ia1_fut <- c(zval_fut[1], pval_fut[1], hr_bound_fut[1], pcross_h0_fut[1], pcross_h1_fut[1])


pfs_rpact_sum <- tibble::tibble(
  rpact_eff = c(ia1_eff, fa_eff),
  rpact_fut = c(ia1_fut, rep(NA_real_, 5))
)

pfs_rpact_sum |>
  dplyr::bind_cols(
    pfs_east |>
      dplyr::select(
        value, analysis, eff_east = eff_125, fut_east = fut_125
        ) |>
      dplyr::mutate(
        eff_east = ifelse(value == 'Z', -eff_east, eff_east),
        fut_east = ifelse(value == 'Z', -fut_east, fut_east)
        )
    ) |>
  dplyr::mutate(
    diff_eff_gsDesign =  abs(eff_east - rpact_eff),
    diff_fut_gsDesign =  abs(fut_east - rpact_fut)
    ) |>
  dplyr::select(
    Analysis = analysis, Value = value, diff_eff_gsDesign,
    diff_fut_gsDesign
    ) |>
  flextable::flextable() |>
  flextable::autofit() |>
    flextable::set_header_labels(
    diff_eff_gsDesign = 'Efficacy',
    diff_fut_gsDesign = 'Futility'
  ) |>
  flextable::hline(i = c(5, 10)) |>
  flextable::colformat_double(j = c(3, 4), digits = digit_comp) |>
  flextable::bg(
    ~ round(abs(diff_eff_gsDesign), digit_comp) != 0,  ~
      diff_eff_gsDesign, bg = '#6ECEB2'
    ) |>
  flextable::bg(
    ~ round(abs(diff_fut_gsDesign), digit_comp) != 0,  ~
      diff_fut_gsDesign, bg = '#6ECEB2'
    ) 

```

```{r}
sessionInfo()
```

## References

-   Lachin JM and Foulkes M. Evaluation of sample size and power for analyses of survival with allowance for nonuniform patient entry, losses to follow-up, non-compliance, and stratification. Biometrics 1986;42:507-19.
-   Kim K and Tsiatis AA. Study duration for clinical trials with survival response and early stopping rule. Biometrics 1990(46): 81-92.
-   Schemper M, Wakounig S and Heinze G. The estimation of average hazard ratios by weighted cox regression. Statistics in Medicine 2009; 28(19): 2473-2489.
-   Yung G and Liu Y. Sample size and power for the weighted log-rank test and Kaplan-Meier based tests with allowance for nonproportional hazards. Biometrics 2020;76:939-50.
